{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "87078a66-29f4-43d7-9883-afc288cbe891",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d69b08db-a2f3-4eaa-a06d-5d2bdf02ad76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting snowflake-connector-pythonNote: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "  Downloading snowflake_connector_python-3.0.4-cp310-cp310-win_amd64.whl (10.7 MB)\n",
      "     ---------------------------------------- 10.7/10.7 MB 4.9 MB/s eta 0:00:00\n",
      "Collecting asn1crypto<2.0.0,>0.24.0\n",
      "  Using cached asn1crypto-1.5.1-py2.py3-none-any.whl (105 kB)\n",
      "Requirement already satisfied: pytz in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (2022.7)\n",
      "Requirement already satisfied: pyOpenSSL<24.0.0,>=16.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (23.0.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (2022.12.7)\n",
      "Collecting oscrypto<2.0.0\n",
      "  Using cached oscrypto-1.3.0-py2.py3-none-any.whl (194 kB)\n",
      "Requirement already satisfied: cffi<2.0.0,>=1.9 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (1.15.1)\n",
      "Collecting pycryptodomex!=3.5.0,<4.0.0,>=3.2\n",
      "  Using cached pycryptodomex-3.18.0-cp35-abi3-win_amd64.whl (1.7 MB)\n",
      "Requirement already satisfied: pyjwt<3.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (2.4.0)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (4.4.0)\n",
      "Requirement already satisfied: cryptography<41.0.0,>=3.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (39.0.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (3.4)\n",
      "Requirement already satisfied: packaging in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (22.0)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (1.26.14)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (2.0.4)\n",
      "Requirement already satisfied: requests<3.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (2.28.1)\n",
      "Requirement already satisfied: sortedcontainers>=2.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (2.4.0)\n",
      "Requirement already satisfied: filelock<4,>=3.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python) (3.9.0)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi<2.0.0,>=1.9->snowflake-connector-python) (2.21)\n",
      "Installing collected packages: asn1crypto, pycryptodomex, oscrypto, snowflake-connector-python\n",
      "Successfully installed asn1crypto-1.5.1 oscrypto-1.3.0 pycryptodomex-3.18.0 snowflake-connector-python-3.0.4\n"
     ]
    }
   ],
   "source": [
    "pip install snowflake-connector-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c24ca20d-87cf-48f2-b111-fb97cf743bab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting snowflake-sqlalchemy\n",
      "  Using cached snowflake_sqlalchemy-1.4.7-py2.py3-none-any.whl (33 kB)\n",
      "Requirement already satisfied: snowflake-connector-python<4.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-sqlalchemy) (3.0.4)\n",
      "Requirement already satisfied: sqlalchemy<2.0.0,>=1.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-sqlalchemy) (1.4.39)\n",
      "Requirement already satisfied: filelock<4,>=3.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (3.9.0)\n",
      "Requirement already satisfied: oscrypto<2.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (1.3.0)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (4.4.0)\n",
      "Requirement already satisfied: cffi<2.0.0,>=1.9 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (1.15.1)\n",
      "Requirement already satisfied: pyjwt<3.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2.4.0)\n",
      "Requirement already satisfied: pytz in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2022.7)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (3.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (1.26.14)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2.0.4)\n",
      "Requirement already satisfied: pyOpenSSL<24.0.0,>=16.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (23.0.0)\n",
      "Requirement already satisfied: asn1crypto<2.0.0,>0.24.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (1.5.1)\n",
      "Requirement already satisfied: sortedcontainers>=2.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2.4.0)\n",
      "Requirement already satisfied: cryptography<41.0.0,>=3.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (39.0.1)\n",
      "Requirement already satisfied: pycryptodomex!=3.5.0,<4.0.0,>=3.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (3.18.0)\n",
      "Requirement already satisfied: packaging in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (22.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2022.12.7)\n",
      "Requirement already satisfied: requests<3.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2.28.1)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from sqlalchemy<2.0.0,>=1.4.0->snowflake-sqlalchemy) (2.0.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi<2.0.0,>=1.9->snowflake-connector-python<4.0.0->snowflake-sqlalchemy) (2.21)\n",
      "Installing collected packages: snowflake-sqlalchemy\n",
      "Successfully installed snowflake-sqlalchemy-1.4.7\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install snowflake-sqlalchemy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "246f5f56-37ab-4bbc-80ab-c4beef8a55e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: snowflake-connector-python[pandas] in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (3.0.4)\n",
      "Requirement already satisfied: asn1crypto<2.0.0,>0.24.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (1.5.1)\n",
      "Requirement already satisfied: pyjwt<3.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (2.4.0)\n",
      "Requirement already satisfied: pyOpenSSL<24.0.0,>=16.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (23.0.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (2022.12.7)\n",
      "Requirement already satisfied: packaging in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (22.0)\n",
      "Requirement already satisfied: requests<3.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (2.28.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (3.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (1.26.14)\n",
      "Requirement already satisfied: sortedcontainers>=2.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (2.4.0)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (4.4.0)\n",
      "Requirement already satisfied: pytz in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (2022.7)\n",
      "Requirement already satisfied: cryptography<41.0.0,>=3.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (39.0.1)\n",
      "Requirement already satisfied: oscrypto<2.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (1.3.0)\n",
      "Requirement already satisfied: filelock<4,>=3.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (3.9.0)\n",
      "Requirement already satisfied: pycryptodomex!=3.5.0,<4.0.0,>=3.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (3.18.0)\n",
      "Requirement already satisfied: cffi<2.0.0,>=1.9 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (1.15.1)\n",
      "Collecting pyarrow<10.1.0,>=10.0.1\n",
      "  Downloading pyarrow-10.0.1-cp310-cp310-win_amd64.whl (20.2 MB)\n",
      "     --------------------------------------- 20.2/20.2 MB 12.4 MB/s eta 0:00:00\n",
      "Requirement already satisfied: pandas<2.1.0,>=1.0.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from snowflake-connector-python[pandas]) (1.5.3)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi<2.0.0,>=1.9->snowflake-connector-python[pandas]) (2.21)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from pandas<2.1.0,>=1.0.0->snowflake-connector-python[pandas]) (2.8.2)\n",
      "Requirement already satisfied: numpy>=1.21.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from pandas<2.1.0,>=1.0.0->snowflake-connector-python[pandas]) (1.23.5)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from python-dateutil>=2.8.1->pandas<2.1.0,>=1.0.0->snowflake-connector-python[pandas]) (1.16.0)\n",
      "Installing collected packages: pyarrow\n",
      "Successfully installed pyarrow-10.0.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install snowflake-connector-python[pandas]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "de6e153a-707f-4471-98a4-4318bcfb5668",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: asn1crypto in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (1.5.1)Note: you may need to restart the kernel to use updated packages.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pip install asn1crypto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "61843b79-6b22-4170-9e01-9f170983b8ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: asn1crypto\n",
      "Version: 1.5.1\n",
      "Summary: Fast ASN.1 parser and serializer with definitions for private keys, public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7, PKCS#8, PKCS#12, PKCS#5, X.509 and TSP\n",
      "Home-page: https://github.com/wbond/asn1crypto\n",
      "Author: wbond\n",
      "Author-email: will@wbond.net\n",
      "License: MIT\n",
      "Location: c:\\users\\vipul\\new_anaconda\\lib\\site-packages\n",
      "Requires: \n",
      "Required-by: oscrypto, snowflake-connector-python\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip show asn1crypto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "436e282a-403d-43bb-b5e4-8020329c7c82",
   "metadata": {},
   "outputs": [],
   "source": [
    "import snowflake.connector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "023d6a4b-32d9-4d50-a8d6-9ee2dd73d655",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: paramiko in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (2.8.1)Note: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "Collecting paramiko\n",
      "  Using cached paramiko-3.2.0-py3-none-any.whl (224 kB)\n",
      "Requirement already satisfied: cryptography>=3.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from paramiko) (39.0.1)\n",
      "Requirement already satisfied: bcrypt>=3.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from paramiko) (3.2.0)\n",
      "Requirement already satisfied: pynacl>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from paramiko) (1.5.0)\n",
      "Requirement already satisfied: six>=1.4.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from bcrypt>=3.2->paramiko) (1.16.0)\n",
      "Requirement already satisfied: cffi>=1.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from bcrypt>=3.2->paramiko) (1.15.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi>=1.1->bcrypt>=3.2->paramiko) (2.21)\n",
      "Installing collected packages: paramiko\n",
      "  Attempting uninstall: paramiko\n",
      "    Found existing installation: paramiko 2.8.1\n",
      "    Uninstalling paramiko-2.8.1:\n",
      "      Successfully uninstalled paramiko-2.8.1\n",
      "Successfully installed paramiko-3.2.0\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade paramiko"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ec920b73-c202-450d-879b-4c77673a1b5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import getpass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0afa0ca5-8037-46bd-98a5-8165ad2969ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting jupyterlab_scheduler\n",
      "  Using cached jupyterlab_scheduler-0.1.5-py3-none-any.whl (1.8 MB)\n",
      "Collecting jupyterlab~=3.1.4\n",
      "  Using cached jupyterlab-3.1.19-py3-none-any.whl (8.6 MB)\n",
      "Collecting papermill~=2.1\n",
      "  Using cached papermill-2.4.0-py3-none-any.whl (38 kB)\n",
      "Collecting python-crontab~=2.5\n",
      "  Using cached python_crontab-2.7.1-py3-none-any.whl (26 kB)\n",
      "Requirement already satisfied: packaging in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (22.0)\n",
      "Requirement already satisfied: jupyterlab-server~=2.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (2.19.0)\n",
      "Requirement already satisfied: nbclassic~=0.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (0.5.2)\n",
      "Requirement already satisfied: ipython in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (8.10.0)\n",
      "Requirement already satisfied: jupyter-core in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (5.2.0)\n",
      "Requirement already satisfied: jupyter-server~=1.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (1.23.4)\n",
      "Requirement already satisfied: tornado>=6.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (6.1)\n",
      "Requirement already satisfied: jinja2>=2.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (3.1.2)\n",
      "Requirement already satisfied: entrypoints in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (0.4)\n",
      "Requirement already satisfied: pyyaml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (6.0)\n",
      "Requirement already satisfied: requests in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (2.28.1)\n",
      "Requirement already satisfied: nbformat>=5.1.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (5.7.0)\n",
      "Collecting ansiwrap\n",
      "  Using cached ansiwrap-0.8.4-py2.py3-none-any.whl (8.5 kB)\n",
      "Requirement already satisfied: tenacity in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (8.0.1)\n",
      "Requirement already satisfied: nbclient>=0.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (0.5.13)\n",
      "Requirement already satisfied: click in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (8.0.4)\n",
      "Requirement already satisfied: tqdm>=4.32.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (4.64.1)\n",
      "Requirement already satisfied: python-dateutil in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from python-crontab~=2.5->jupyterlab_scheduler) (2.8.2)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jinja2>=2.1->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.1.1)\n",
      "Requirement already satisfied: pyzmq>=17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (23.2.0)\n",
      "Requirement already satisfied: anyio<4,>=3.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (3.5.0)\n",
      "Requirement already satisfied: Send2Trash in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.8.0)\n",
      "Requirement already satisfied: nbconvert>=6.4.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (6.5.4)\n",
      "Requirement already satisfied: argon2-cffi in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (21.3.0)\n",
      "Requirement already satisfied: terminado>=0.8.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.17.1)\n",
      "Requirement already satisfied: websocket-client in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.58.0)\n",
      "Requirement already satisfied: pywinpty in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.0.10)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (7.3.4)\n",
      "Requirement already satisfied: prometheus-client in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.14.1)\n",
      "Requirement already satisfied: traitlets>=5.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (5.7.1)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-core->jupyterlab~=3.1.4->jupyterlab_scheduler) (305.1)\n",
      "Requirement already satisfied: platformdirs>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-core->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.5.2)\n",
      "Requirement already satisfied: babel>=2.10 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.11.0)\n",
      "Requirement already satisfied: jsonschema>=4.17.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.17.3)\n",
      "Requirement already satisfied: json5>=0.9.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.9.6)\n",
      "Requirement already satisfied: ipython-genutils in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.0)\n",
      "Requirement already satisfied: nest-asyncio>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.5.6)\n",
      "Requirement already satisfied: notebook-shim>=0.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.2)\n",
      "Requirement already satisfied: ipykernel in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (6.19.2)\n",
      "Requirement already satisfied: fastjsonschema in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbformat>=5.1.2->papermill~=2.1->jupyterlab_scheduler) (2.16.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (3.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (2022.12.7)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (2.0.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (1.26.14)\n",
      "Requirement already satisfied: colorama in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from tqdm>=4.32.2->papermill~=2.1->jupyterlab_scheduler) (0.4.6)\n",
      "Collecting textwrap3>=0.9.2\n",
      "  Using cached textwrap3-0.9.2-py2.py3-none-any.whl (12 kB)\n",
      "Requirement already satisfied: pygments>=2.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.11.2)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.30 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (3.0.36)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.18.1)\n",
      "Requirement already satisfied: matplotlib-inline in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.1.6)\n",
      "Requirement already satisfied: stack-data in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.0)\n",
      "Requirement already satisfied: pickleshare in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.7.5)\n",
      "Requirement already satisfied: backcall in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.0)\n",
      "Requirement already satisfied: decorator in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (5.1.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from python-dateutil->python-crontab~=2.5->jupyterlab_scheduler) (1.16.0)\n",
      "Requirement already satisfied: sniffio>=1.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from anyio<4,>=3.1.0->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.2.0)\n",
      "Requirement already satisfied: pytz>=2015.7 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from babel>=2.10->jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (2022.7)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jedi>=0.16->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.8.3)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jsonschema>=4.17.3->jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (22.1.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jsonschema>=4.17.3->jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.18.0)\n",
      "Requirement already satisfied: tinycss2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.2.1)\n",
      "Requirement already satisfied: lxml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.9.1)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.8.4)\n",
      "Requirement already satisfied: bleach in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.1.0)\n",
      "Requirement already satisfied: jupyterlab-pygments in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.1.2)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.7.1)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.5.0)\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.11.1)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from prompt-toolkit<3.1.0,>=3.0.30->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.5)\n",
      "Requirement already satisfied: argon2-cffi-bindings in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from argon2-cffi->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (21.2.0)\n",
      "Requirement already satisfied: debugpy>=1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipykernel->nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.5.1)\n",
      "Requirement already satisfied: psutil in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipykernel->nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (5.9.0)\n",
      "Requirement already satisfied: comm>=0.1.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipykernel->nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.1.2)\n",
      "Requirement already satisfied: asttokens in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from stack-data->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.0.5)\n",
      "Requirement already satisfied: pure-eval in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from stack-data->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.2)\n",
      "Requirement already satisfied: executing in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from stack-data->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.8.3)\n",
      "Requirement already satisfied: cffi>=1.0.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from argon2-cffi-bindings->argon2-cffi->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.15.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from beautifulsoup4->nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.3.2.post1)\n",
      "Requirement already satisfied: webencodings in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from bleach->nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.5.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.21)\n",
      "Installing collected packages: textwrap3, ansiwrap, python-crontab, papermill, jupyterlab, jupyterlab_scheduler\n",
      "  Attempting uninstall: jupyterlab\n",
      "    Found existing installation: jupyterlab 3.5.3\n",
      "    Uninstalling jupyterlab-3.5.3:\n",
      "      Successfully uninstalled jupyterlab-3.5.3\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not install packages due to an OSError: [WinError 5] Access is denied: 'C:\\\\Users\\\\Vipul\\\\AppData\\\\Local\\\\Temp\\\\pip-uninstall-lhadieg8\\\\jupyter-lab.exe'\n",
      "Consider using the `--user` option or check the permissions.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pip install jupyterlab_scheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b48f7a3d-d3f0-4630-a487-72fb8efbf5d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting jupyterlab_scheduler\n",
      "  Using cached jupyterlab_scheduler-0.1.5-py3-none-any.whl (1.8 MB)\n",
      "Requirement already satisfied: jupyterlab~=3.1.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab_scheduler) (3.1.19)\n",
      "Requirement already satisfied: papermill~=2.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab_scheduler) (2.4.0)\n",
      "Requirement already satisfied: python-crontab~=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab_scheduler) (2.7.1)\n",
      "Requirement already satisfied: jupyter-server~=1.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (1.23.4)\n",
      "Requirement already satisfied: ipython in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (8.10.0)\n",
      "Requirement already satisfied: packaging in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (22.0)\n",
      "Requirement already satisfied: jupyter-core in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (5.2.0)\n",
      "Requirement already satisfied: jinja2>=2.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (3.1.2)\n",
      "Requirement already satisfied: jupyterlab-server~=2.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (2.19.0)\n",
      "Requirement already satisfied: tornado>=6.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (6.1)\n",
      "Requirement already satisfied: nbclassic~=0.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab~=3.1.4->jupyterlab_scheduler) (0.5.2)\n",
      "Requirement already satisfied: requests in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (2.28.1)\n",
      "Requirement already satisfied: tqdm>=4.32.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (4.64.1)\n",
      "Requirement already satisfied: pyyaml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (6.0)\n",
      "Requirement already satisfied: nbformat>=5.1.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (5.7.0)\n",
      "Requirement already satisfied: entrypoints in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (0.4)\n",
      "Requirement already satisfied: tenacity in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (8.0.1)\n",
      "Requirement already satisfied: ansiwrap in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (0.8.4)\n",
      "Requirement already satisfied: click in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (8.0.4)\n",
      "Requirement already satisfied: nbclient>=0.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from papermill~=2.1->jupyterlab_scheduler) (0.5.13)\n",
      "Requirement already satisfied: python-dateutil in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from python-crontab~=2.5->jupyterlab_scheduler) (2.8.2)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jinja2>=2.1->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.1.1)\n",
      "Requirement already satisfied: terminado>=0.8.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.17.1)\n",
      "Requirement already satisfied: nbconvert>=6.4.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (6.5.4)\n",
      "Requirement already satisfied: argon2-cffi in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (21.3.0)\n",
      "Requirement already satisfied: pywinpty in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.0.10)\n",
      "Requirement already satisfied: anyio<4,>=3.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (3.5.0)\n",
      "Requirement already satisfied: pyzmq>=17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (23.2.0)\n",
      "Requirement already satisfied: Send2Trash in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.8.0)\n",
      "Requirement already satisfied: websocket-client in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.58.0)\n",
      "Requirement already satisfied: traitlets>=5.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (5.7.1)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (7.3.4)\n",
      "Requirement already satisfied: prometheus-client in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.14.1)\n",
      "Requirement already satisfied: platformdirs>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-core->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.5.2)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-core->jupyterlab~=3.1.4->jupyterlab_scheduler) (305.1)\n",
      "Requirement already satisfied: babel>=2.10 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.11.0)\n",
      "Requirement already satisfied: jsonschema>=4.17.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.17.3)\n",
      "Requirement already satisfied: json5>=0.9.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.9.6)\n",
      "Requirement already satisfied: ipython-genutils in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.0)\n",
      "Requirement already satisfied: ipykernel in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (6.19.2)\n",
      "Requirement already satisfied: notebook-shim>=0.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.2)\n",
      "Requirement already satisfied: nest-asyncio>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.5.6)\n",
      "Requirement already satisfied: fastjsonschema in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbformat>=5.1.2->papermill~=2.1->jupyterlab_scheduler) (2.16.2)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (2022.12.7)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (1.26.14)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from requests->papermill~=2.1->jupyterlab_scheduler) (3.4)\n",
      "Requirement already satisfied: colorama in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from tqdm>=4.32.2->papermill~=2.1->jupyterlab_scheduler) (0.4.6)\n",
      "Requirement already satisfied: textwrap3>=0.9.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ansiwrap->papermill~=2.1->jupyterlab_scheduler) (0.9.2)\n",
      "Requirement already satisfied: pygments>=2.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.11.2)\n",
      "Requirement already satisfied: decorator in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (5.1.1)\n",
      "Requirement already satisfied: matplotlib-inline in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.1.6)\n",
      "Requirement already satisfied: stack-data in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.0)\n",
      "Requirement already satisfied: backcall in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.0)\n",
      "Requirement already satisfied: pickleshare in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.7.5)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.30 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (3.0.36)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.18.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from python-dateutil->python-crontab~=2.5->jupyterlab_scheduler) (1.16.0)\n",
      "Requirement already satisfied: sniffio>=1.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from anyio<4,>=3.1.0->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.2.0)\n",
      "Requirement already satisfied: pytz>=2015.7 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from babel>=2.10->jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (2022.7)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jedi>=0.16->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.8.3)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jsonschema>=4.17.3->jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (22.1.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jsonschema>=4.17.3->jupyterlab-server~=2.3->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.18.0)\n",
      "Requirement already satisfied: bleach in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.1.0)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.7.1)\n",
      "Requirement already satisfied: jupyterlab-pygments in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.1.2)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.5.0)\n",
      "Requirement already satisfied: lxml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.9.1)\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (4.11.1)\n",
      "Requirement already satisfied: tinycss2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.2.1)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.8.4)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from prompt-toolkit<3.1.0,>=3.0.30->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.5)\n",
      "Requirement already satisfied: argon2-cffi-bindings in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from argon2-cffi->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (21.2.0)\n",
      "Requirement already satisfied: debugpy>=1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipykernel->nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.5.1)\n",
      "Requirement already satisfied: comm>=0.1.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipykernel->nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.1.2)\n",
      "Requirement already satisfied: psutil in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from ipykernel->nbclassic~=0.2->jupyterlab~=3.1.4->jupyterlab_scheduler) (5.9.0)\n",
      "Requirement already satisfied: executing in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from stack-data->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.8.3)\n",
      "Requirement already satisfied: asttokens in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from stack-data->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.0.5)\n",
      "Requirement already satisfied: pure-eval in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from stack-data->ipython->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.2.2)\n",
      "Requirement already satisfied: cffi>=1.0.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from argon2-cffi-bindings->argon2-cffi->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (1.15.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from beautifulsoup4->nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.3.2.post1)\n",
      "Requirement already satisfied: webencodings in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from bleach->nbconvert>=6.4.4->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (0.5.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->jupyter-server~=1.4->jupyterlab~=3.1.4->jupyterlab_scheduler) (2.21)\n",
      "Installing collected packages: jupyterlab_scheduler\n",
      "Successfully installed jupyterlab_scheduler-0.1.5\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install jupyterlab_scheduler --user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8e5bc51c-de6c-432f-a524-c15a9fef3680",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting jupyter_scheduler\n",
      "  Using cached jupyter_scheduler-1.3.2-py3-none-any.whl (516 kB)\n",
      "Requirement already satisfied: pytz in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (2022.7)\n",
      "Collecting pydantic\n",
      "  Downloading pydantic-1.10.8-cp310-cp310-win_amd64.whl (2.1 MB)\n",
      "     ---------------------------------------- 2.1/2.1 MB 5.0 MB/s eta 0:00:00\n",
      "Collecting croniter\n",
      "  Using cached croniter-1.3.15-py2.py3-none-any.whl (19 kB)\n",
      "Requirement already satisfied: traitlets in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (5.7.1)\n",
      "Requirement already satisfied: sqlalchemy<2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (1.4.39)\n",
      "Requirement already satisfied: fsspec in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (2022.11.0)\n",
      "Requirement already satisfied: nbconvert in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (6.5.4)\n",
      "Requirement already satisfied: psutil in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (5.9.0)\n",
      "Requirement already satisfied: jupyter-server<3,>=1.6 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter_scheduler) (1.23.4)\n",
      "Collecting s3fs\n",
      "  Using cached s3fs-2023.5.0-py3-none-any.whl (28 kB)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (7.3.4)\n",
      "Requirement already satisfied: terminado>=0.8.3 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (0.17.1)\n",
      "Requirement already satisfied: websocket-client in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (0.58.0)\n",
      "Requirement already satisfied: jupyter-core>=4.7.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (5.2.0)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (3.1.2)\n",
      "Requirement already satisfied: prometheus-client in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (0.14.1)\n",
      "Requirement already satisfied: pyzmq>=17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (23.2.0)\n",
      "Requirement already satisfied: tornado>=6.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (6.1)\n",
      "Requirement already satisfied: Send2Trash in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (1.8.0)\n",
      "Requirement already satisfied: packaging in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (22.0)\n",
      "Requirement already satisfied: pywinpty in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (2.0.10)\n",
      "Requirement already satisfied: argon2-cffi in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (21.3.0)\n",
      "Requirement already satisfied: anyio<4,>=3.1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (3.5.0)\n",
      "Requirement already satisfied: nbformat>=5.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-server<3,>=1.6->jupyter_scheduler) (5.7.0)\n",
      "Requirement already satisfied: nbclient>=0.5.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (0.5.13)\n",
      "Requirement already satisfied: tinycss2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (1.2.1)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (0.7.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (2.1.1)\n",
      "Requirement already satisfied: lxml in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (4.9.1)\n",
      "Requirement already satisfied: pygments>=2.4.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (2.11.2)\n",
      "Requirement already satisfied: bleach in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (4.1.0)\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (4.11.1)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (0.8.4)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (1.5.0)\n",
      "Requirement already satisfied: jupyterlab-pygments in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (0.1.2)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbconvert->jupyter_scheduler) (0.4)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from sqlalchemy<2->jupyter_scheduler) (2.0.1)\n",
      "Requirement already satisfied: python-dateutil in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from croniter->jupyter_scheduler) (2.8.2)\n",
      "Requirement already satisfied: typing-extensions>=4.2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from pydantic->jupyter_scheduler) (4.4.0)\n",
      "Collecting aiobotocore~=2.5.0\n",
      "  Using cached aiobotocore-2.5.0-py3-none-any.whl (72 kB)\n",
      "Collecting aiohttp!=4.0.0a0,!=4.0.0a1\n",
      "  Downloading aiohttp-3.8.4-cp310-cp310-win_amd64.whl (319 kB)\n",
      "     -------------------------------------- 319.8/319.8 kB 6.7 MB/s eta 0:00:00\n",
      "Collecting fsspec\n",
      "  Using cached fsspec-2023.5.0-py3-none-any.whl (160 kB)\n",
      "Collecting botocore<1.29.77,>=1.29.76\n",
      "  Using cached botocore-1.29.76-py3-none-any.whl (10.4 MB)\n",
      "Requirement already satisfied: wrapt>=1.10.10 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from aiobotocore~=2.5.0->s3fs->jupyter_scheduler) (1.14.1)\n",
      "Collecting aioitertools>=0.5.1\n",
      "  Using cached aioitertools-0.11.0-py3-none-any.whl (23 kB)\n",
      "Collecting yarl<2.0,>=1.0\n",
      "  Downloading yarl-1.9.2-cp310-cp310-win_amd64.whl (61 kB)\n",
      "     ---------------------------------------- 61.0/61.0 kB ? eta 0:00:00\n",
      "Collecting multidict<7.0,>=4.5\n",
      "  Downloading multidict-6.0.4-cp310-cp310-win_amd64.whl (28 kB)\n",
      "Collecting async-timeout<5.0,>=4.0.0a3\n",
      "  Using cached async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n",
      "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs->jupyter_scheduler) (2.0.4)\n",
      "Collecting frozenlist>=1.1.1\n",
      "  Downloading frozenlist-1.3.3-cp310-cp310-win_amd64.whl (33 kB)\n",
      "Requirement already satisfied: attrs>=17.3.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->s3fs->jupyter_scheduler) (22.1.0)\n",
      "Collecting aiosignal>=1.1.2\n",
      "  Using cached aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n",
      "Requirement already satisfied: sniffio>=1.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.6->jupyter_scheduler) (1.2.0)\n",
      "Requirement already satisfied: idna>=2.8 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.6->jupyter_scheduler) (3.4)\n",
      "Requirement already satisfied: nest-asyncio>=1.5.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-client>=6.1.12->jupyter-server<3,>=1.6->jupyter_scheduler) (1.5.6)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-core>=4.7.0->jupyter-server<3,>=1.6->jupyter_scheduler) (305.1)\n",
      "Requirement already satisfied: platformdirs>=2.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jupyter-core>=4.7.0->jupyter-server<3,>=1.6->jupyter_scheduler) (2.5.2)\n",
      "Requirement already satisfied: jsonschema>=2.6 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbformat>=5.2.0->jupyter-server<3,>=1.6->jupyter_scheduler) (4.17.3)\n",
      "Requirement already satisfied: fastjsonschema in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from nbformat>=5.2.0->jupyter-server<3,>=1.6->jupyter_scheduler) (2.16.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from python-dateutil->croniter->jupyter_scheduler) (1.16.0)\n",
      "Requirement already satisfied: argon2-cffi-bindings in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from argon2-cffi->jupyter-server<3,>=1.6->jupyter_scheduler) (21.2.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from beautifulsoup4->nbconvert->jupyter_scheduler) (2.3.2.post1)\n",
      "Requirement already satisfied: webencodings in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from bleach->nbconvert->jupyter_scheduler) (0.5.1)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.25.4 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from botocore<1.29.77,>=1.29.76->aiobotocore~=2.5.0->s3fs->jupyter_scheduler) (1.26.14)\n",
      "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from botocore<1.29.77,>=1.29.76->aiobotocore~=2.5.0->s3fs->jupyter_scheduler) (0.10.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from jsonschema>=2.6->nbformat>=5.2.0->jupyter-server<3,>=1.6->jupyter_scheduler) (0.18.0)\n",
      "Requirement already satisfied: cffi>=1.0.1 in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from argon2-cffi-bindings->argon2-cffi->jupyter-server<3,>=1.6->jupyter_scheduler) (1.15.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\vipul\\new_anaconda\\lib\\site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->jupyter-server<3,>=1.6->jupyter_scheduler) (2.21)\n",
      "Installing collected packages: pydantic, multidict, fsspec, frozenlist, async-timeout, aioitertools, yarl, croniter, botocore, aiosignal, aiohttp, aiobotocore, s3fs, jupyter_scheduler\n",
      "  Attempting uninstall: fsspec\n",
      "    Found existing installation: fsspec 2022.11.0\n",
      "    Uninstalling fsspec-2022.11.0:\n",
      "      Successfully uninstalled fsspec-2022.11.0\n",
      "Successfully installed aiobotocore-2.5.0 aiohttp-3.8.4 aioitertools-0.11.0 aiosignal-1.3.1 async-timeout-4.0.2 botocore-1.29.76 croniter-1.3.15 frozenlist-1.3.3 fsspec-2023.5.0 jupyter_scheduler-1.3.2 multidict-6.0.4 pydantic-1.10.8 s3fs-2023.5.0 yarl-1.9.2\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install jupyter_scheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d705ee2-5c98-4cf5-ac94-32d6389edb9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Your Snowflake Password:  ·············\n"
     ]
    }
   ],
   "source": [
    "conn = snowflake.connector.connect(\n",
    "        user = 'PAYALB',\n",
    "        password = getpass.getpass('Your Snowflake Password: '),\n",
    "        ##password='Your password',\n",
    "        ##  account = https://zjxcbru-hk64126.snowflakecomputing.com\n",
    "        account = 'zjxcbru-hk64126',\n",
    "        database='pb_project',\n",
    "        schema='PUBLIC',\n",
    "        warehouse='COMPUTE_WH',\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bc2121a4-c2eb-45f0-a59d-b39a045b002b",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6f14a358-347d-4ee5-8d75-202d24d3a29f",
   "metadata": {},
   "outputs": [],
   "source": [
    "select_demographic_RAW = 'SELECT * FROM DEMOGRAPHIC_RAW'\n",
    "select_CAMPAIGN_DESC_RAW = 'SELECT * FROM CAMPAIGN_DESC_RAW'\n",
    "select_CAMPAIGN_RAW = 'SELECT * FROM CAMPAIGN_RAW'\n",
    "select_PRODUCT_RAW = 'SELECT * FROM PRODUCT_RAW'\n",
    "select_COUPON_RAW = 'SELECT * FROM COUPON_RAW'\n",
    "select_COUPON_REDEMPT_RAW = 'SELECT * FROM COUPON_REDEMPT_RAW'\n",
    "select_TRANSACTION_RAW = 'SELECT * FROM TRANSACTION_RAW'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ceece865-9703-4010-8a6b-f9d2a6880937",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_demographic_RAW)\n",
    "DEMOGRAPHIC_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "85077d5d-4545-47d6-8fd7-6d4d61fc0650",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_CAMPAIGN_DESC_RAW)\n",
    "CAMPAIGN_DESC_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f5003180-788a-4e23-a0a3-53493268b055",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_CAMPAIGN_RAW)\n",
    "CAMPAIGN_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d280e150-d4ff-4fc0-8c4c-ed4209e2bbe9",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_PRODUCT_RAW)\n",
    "PRODUCT_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6b54b035-a288-4169-8f99-5a991257d562",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_COUPON_RAW)\n",
    "COUPON_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "adb4f234-b52e-467b-8445-db0af0925caa",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_COUPON_REDEMPT_RAW)\n",
    "COUPON_REDEMPT_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1059a340-cbeb-4243-a1a3-00cb9f6f4975",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.execute(select_TRANSACTION_RAW)\n",
    "TRANSACTION_RAW = cur.fetch_pandas_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "780c4bf2-d05a-498c-9f8d-cdc603100999",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.close()\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2cba1414-9107-4b91-a895-ea11f8743829",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AGE_DESC</th>\n",
       "      <th>MARITAL_STATUS_CODE</th>\n",
       "      <th>INCOME_DESC</th>\n",
       "      <th>HOMEOWNER_DESC</th>\n",
       "      <th>HH_COMP_DESC</th>\n",
       "      <th>HOUSEHOLD_SIZE_DESC</th>\n",
       "      <th>KID_CATEGORY_DESC</th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>65+</td>\n",
       "      <td>A</td>\n",
       "      <td>35-49K</td>\n",
       "      <td>Homeowner</td>\n",
       "      <td>2 Adults No Kids</td>\n",
       "      <td>2</td>\n",
       "      <td>None/Unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45-54</td>\n",
       "      <td>A</td>\n",
       "      <td>50-74K</td>\n",
       "      <td>Homeowner</td>\n",
       "      <td>2 Adults No Kids</td>\n",
       "      <td>2</td>\n",
       "      <td>None/Unknown</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25-34</td>\n",
       "      <td>U</td>\n",
       "      <td>25-34K</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>2 Adults Kids</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25-34</td>\n",
       "      <td>U</td>\n",
       "      <td>75-99K</td>\n",
       "      <td>Homeowner</td>\n",
       "      <td>2 Adults Kids</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>45-54</td>\n",
       "      <td>B</td>\n",
       "      <td>50-74K</td>\n",
       "      <td>Homeowner</td>\n",
       "      <td>Single Female</td>\n",
       "      <td>1</td>\n",
       "      <td>None/Unknown</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  AGE_DESC MARITAL_STATUS_CODE INCOME_DESC HOMEOWNER_DESC      HH_COMP_DESC  \\\n",
       "0      65+                   A      35-49K      Homeowner  2 Adults No Kids   \n",
       "1    45-54                   A      50-74K      Homeowner  2 Adults No Kids   \n",
       "2    25-34                   U      25-34K        Unknown     2 Adults Kids   \n",
       "3    25-34                   U      75-99K      Homeowner     2 Adults Kids   \n",
       "4    45-54                   B      50-74K      Homeowner     Single Female   \n",
       "\n",
       "  HOUSEHOLD_SIZE_DESC KID_CATEGORY_DESC  HOUSEHOLD_KEY  \n",
       "0                   2      None/Unknown              1  \n",
       "1                   2      None/Unknown              7  \n",
       "2                   3                 1              8  \n",
       "3                   4                 2             13  \n",
       "4                   1      None/Unknown             16  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DEMOGRAPHIC_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "31c1c638-4a8b-44c7-a020-de97c3005be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>659</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>547</td>\n",
       "      <td>708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>659</td>\n",
       "      <td>691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>615</td>\n",
       "      <td>685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>646</td>\n",
       "      <td>684</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  START_DAY  END_DAY\n",
       "0       TypeB        24        659      719\n",
       "1       TypeC        15        547      708\n",
       "2       TypeB        25        659      691\n",
       "3       TypeC        20        615      685\n",
       "4       TypeB        23        646      684"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "961591cc-cb69-4734-ac18-81f6e4591f3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeA</td>\n",
       "      <td>17</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeA</td>\n",
       "      <td>27</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeA</td>\n",
       "      <td>212</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeA</td>\n",
       "      <td>208</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeA</td>\n",
       "      <td>192</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  HOUSEHOLD_KEY  CAMPAIGN\n",
       "0       TypeA             17        26\n",
       "1       TypeA             27        26\n",
       "2       TypeA            212        26\n",
       "3       TypeA            208        26\n",
       "4       TypeA            192        26"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2edf30aa-11f6-4e39-b956-aa112a5ada50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000089061</td>\n",
       "      <td>27160</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10000089064</td>\n",
       "      <td>27754</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10000089073</td>\n",
       "      <td>28897</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>51800009050</td>\n",
       "      <td>28919</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>52100000076</td>\n",
       "      <td>28929</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    COUPON_UPC  PRODUCT_ID  CAMPAIGN\n",
       "0  10000089061       27160         4\n",
       "1  10000089064       27754         9\n",
       "2  10000089073       28897        12\n",
       "3  51800009050       28919        28\n",
       "4  52100000076       28929        25"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2f33d566-c62f-49fc-b5be-301a5cdb839e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>MANUFACTURER</th>\n",
       "      <th>DEPARTMENT</th>\n",
       "      <th>BRAND</th>\n",
       "      <th>COMMODITY_DESC</th>\n",
       "      <th>SUB_COMMODITY_DESC</th>\n",
       "      <th>CURR_SIZE_OF_PRODUCT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25671</td>\n",
       "      <td>2</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>FRZN ICE</td>\n",
       "      <td>ICE - CRUSHED/CUBED</td>\n",
       "      <td>22 LB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26081</td>\n",
       "      <td>2</td>\n",
       "      <td>MISC. TRANS.</td>\n",
       "      <td>National</td>\n",
       "      <td>NO COMMODITY DESCRIPTION</td>\n",
       "      <td>NO SUBCOMMODITY DESCRIPTION</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26093</td>\n",
       "      <td>69</td>\n",
       "      <td>PASTRY</td>\n",
       "      <td>Private</td>\n",
       "      <td>BREAD</td>\n",
       "      <td>BREAD:ITALIAN/FRENCH</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26190</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>FRUIT - SHELF STABLE</td>\n",
       "      <td>APPLE SAUCE</td>\n",
       "      <td>50 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26355</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>COOKIES/CONES</td>\n",
       "      <td>SPECIALTY COOKIES</td>\n",
       "      <td>14 OZ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PRODUCT_ID  MANUFACTURER    DEPARTMENT     BRAND            COMMODITY_DESC  \\\n",
       "0       25671             2       GROCERY  National                  FRZN ICE   \n",
       "1       26081             2  MISC. TRANS.  National  NO COMMODITY DESCRIPTION   \n",
       "2       26093            69        PASTRY   Private                     BREAD   \n",
       "3       26190            69       GROCERY   Private      FRUIT - SHELF STABLE   \n",
       "4       26355            69       GROCERY   Private             COOKIES/CONES   \n",
       "\n",
       "            SUB_COMMODITY_DESC CURR_SIZE_OF_PRODUCT  \n",
       "0          ICE - CRUSHED/CUBED                22 LB  \n",
       "1  NO SUBCOMMODITY DESCRIPTION                       \n",
       "2         BREAD:ITALIAN/FRENCH                       \n",
       "3                  APPLE SAUCE                50 OZ  \n",
       "4            SPECIALTY COOKIES                14 OZ  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PRODUCT_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b801a704-0f25-4b3e-b18b-02deb0f00291",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>DAY</th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>421</td>\n",
       "      <td>10000085364</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>421</td>\n",
       "      <td>51700010076</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>427</td>\n",
       "      <td>54200000033</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>597</td>\n",
       "      <td>10000085476</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>597</td>\n",
       "      <td>54200029176</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY  DAY   COUPON_UPC  CAMPAIGN\n",
       "0              1  421  10000085364         8\n",
       "1              1  421  51700010076         8\n",
       "2              1  427  54200000033         8\n",
       "3              1  597  10000085476        18\n",
       "4              1  597  54200029176        18"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "71c8c132-28cc-47bd-9472-6c0fdfee82ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1873</td>\n",
       "      <td>29330097522</td>\n",
       "      <td>177</td>\n",
       "      <td>1135681</td>\n",
       "      <td>1</td>\n",
       "      <td>1.29</td>\n",
       "      <td>320</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>828427</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>334</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  DAY  PRODUCT_ID  QUANTITY  SALES_VALUE  \\\n",
       "0           2056  29330027026  177     1106523         1         2.32   \n",
       "1           2056  29330027026  177     5567325         1         2.69   \n",
       "2           2056  29330027027  177     1106523         1         2.32   \n",
       "3           1873  29330097522  177     1135681         1         1.29   \n",
       "4           1602  29339301484  177      828427         1         0.22   \n",
       "\n",
       "   STORE_ID  RETAIL_DESC  TRANS_TIME  WEEK_NO  COUPON_DISC  COUPON_MATCH_DISC  \n",
       "0       341         0.00           4       26            0                  0  \n",
       "1       341         0.00           4       26            0                  0  \n",
       "2       341         0.00           4       26            0                  0  \n",
       "3       320         0.00           1       26            0                  0  \n",
       "4       334        -0.07        1537       26            0                  0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1d02d848-89f1-44c5-b450-c3782bb457cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2500, 8)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DEMOGRAPHIC_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b783f98f-606b-4f59-bff1-cf3e58972065",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 4)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c252a0a9-52a6-402f-818e-8b1832d30c26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7208, 3)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9b0286e6-aedd-440c-8e2f-6034960e17a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(124548, 3)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7b96b1e2-d985-4fd1-b398-1a8ad31ad59f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2318, 4)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "44e288f7-7817-4d83-903e-acc7e4aa3dd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(92353, 7)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PRODUCT_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8501ffb0-3b0d-4014-9113-b0235699ecbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2595732, 12)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "35390bd2-f399-4fe7-873d-57f2b7156e6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DESCRIPTION    0\n",
       "CAMPAIGN       0\n",
       "START_DAY      0\n",
       "END_DAY        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e00448c1-0ff9-42c6-8ea3-c6f772f1f43c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>15.500000</td>\n",
       "      <td>463.866667</td>\n",
       "      <td>510.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.803408</td>\n",
       "      <td>134.488490</td>\n",
       "      <td>137.730555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>264.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.250000</td>\n",
       "      <td>360.000000</td>\n",
       "      <td>405.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>15.500000</td>\n",
       "      <td>470.000000</td>\n",
       "      <td>502.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>22.750000</td>\n",
       "      <td>584.000000</td>\n",
       "      <td>640.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>659.000000</td>\n",
       "      <td>719.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        CAMPAIGN   START_DAY     END_DAY\n",
       "count  30.000000   30.000000   30.000000\n",
       "mean   15.500000  463.866667  510.466667\n",
       "std     8.803408  134.488490  137.730555\n",
       "min     1.000000  224.000000  264.000000\n",
       "25%     8.250000  360.000000  405.750000\n",
       "50%    15.500000  470.000000  502.000000\n",
       "75%    22.750000  584.000000  640.250000\n",
       "max    30.000000  659.000000  719.000000"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3857093d-11d7-4d82-b2d1-0cc1c32de248",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PRODUCT_ID              0\n",
       "MANUFACTURER            0\n",
       "DEPARTMENT              0\n",
       "BRAND                   0\n",
       "COMMODITY_DESC          0\n",
       "SUB_COMMODITY_DESC      0\n",
       "CURR_SIZE_OF_PRODUCT    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PRODUCT_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "dae5c801-8606-4ec8-8a73-0ce80f959293",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>MANUFACTURER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.235300e+04</td>\n",
       "      <td>92353.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.328353e+06</td>\n",
       "      <td>1739.22833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.359937e+06</td>\n",
       "      <td>1818.26957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.567100e+04</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>9.706280e+05</td>\n",
       "      <td>328.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.621091e+06</td>\n",
       "      <td>1094.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.704770e+06</td>\n",
       "      <td>2264.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.831630e+07</td>\n",
       "      <td>6477.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         PRODUCT_ID  MANUFACTURER\n",
       "count  9.235300e+04   92353.00000\n",
       "mean   5.328353e+06    1739.22833\n",
       "std    5.359937e+06    1818.26957\n",
       "min    2.567100e+04       1.00000\n",
       "25%    9.706280e+05     328.00000\n",
       "50%    1.621091e+06    1094.00000\n",
       "75%    9.704770e+06    2264.00000\n",
       "max    1.831630e+07    6477.00000"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PRODUCT_RAW.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e8e7c0ac-d030-4879-a285-ac1f82a2bca2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DESCRIPTION      0\n",
       "HOUSEHOLD_KEY    0\n",
       "CAMPAIGN         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5222dee6-f753-4328-9a3f-06358060e997",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7208.000000</td>\n",
       "      <td>7208.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1268.696726</td>\n",
       "      <td>15.659545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>731.936391</td>\n",
       "      <td>6.949705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>644.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1263.000000</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1924.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2500.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       HOUSEHOLD_KEY     CAMPAIGN\n",
       "count    7208.000000  7208.000000\n",
       "mean     1268.696726    15.659545\n",
       "std       731.936391     6.949705\n",
       "min         1.000000     1.000000\n",
       "25%       644.000000     9.000000\n",
       "50%      1263.000000    14.000000\n",
       "75%      1924.000000    20.000000\n",
       "max      2500.000000    30.000000"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_RAW.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "27299115-2e95-4f58-a83f-9d4bcf702474",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HOUSEHOLD_KEY    0\n",
       "DAY              0\n",
       "COUPON_UPC       0\n",
       "CAMPAIGN         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9a189098-d179-40bf-8d80-efb1fefc48e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>DAY</th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2318.000000</td>\n",
       "      <td>2318.000000</td>\n",
       "      <td>2.318000e+03</td>\n",
       "      <td>2318.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1302.816652</td>\n",
       "      <td>528.217429</td>\n",
       "      <td>4.123049e+10</td>\n",
       "      <td>15.551337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>783.002545</td>\n",
       "      <td>100.360985</td>\n",
       "      <td>1.986068e+10</td>\n",
       "      <td>5.716636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>225.000000</td>\n",
       "      <td>1.000009e+10</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>588.000000</td>\n",
       "      <td>458.250000</td>\n",
       "      <td>1.000009e+10</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1396.500000</td>\n",
       "      <td>532.000000</td>\n",
       "      <td>5.234003e+10</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2004.000000</td>\n",
       "      <td>605.000000</td>\n",
       "      <td>5.430002e+10</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2500.000000</td>\n",
       "      <td>704.000000</td>\n",
       "      <td>5.897850e+10</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       HOUSEHOLD_KEY          DAY    COUPON_UPC     CAMPAIGN\n",
       "count    2318.000000  2318.000000  2.318000e+03  2318.000000\n",
       "mean     1302.816652   528.217429  4.123049e+10    15.551337\n",
       "std       783.002545   100.360985  1.986068e+10     5.716636\n",
       "min         1.000000   225.000000  1.000009e+10     1.000000\n",
       "25%       588.000000   458.250000  1.000009e+10    13.000000\n",
       "50%      1396.500000   532.000000  5.234003e+10    14.000000\n",
       "75%      2004.000000   605.000000  5.430002e+10    18.000000\n",
       "max      2500.000000   704.000000  5.897850e+10    30.000000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fb26260e-6317-4e5d-b87e-9d5deafcac51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "COUPON_UPC    0\n",
       "PRODUCT_ID    0\n",
       "CAMPAIGN      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "422a9cb3-cf44-4602-bb4c-5c29a22128ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.245480e+05</td>\n",
       "      <td>1.245480e+05</td>\n",
       "      <td>124548.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.198225e+10</td>\n",
       "      <td>4.651277e+06</td>\n",
       "      <td>15.855935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.961641e+10</td>\n",
       "      <td>4.843450e+06</td>\n",
       "      <td>6.015524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000009e+10</td>\n",
       "      <td>2.567100e+04</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000009e+10</td>\n",
       "      <td>9.593030e+05</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000009e+10</td>\n",
       "      <td>1.411451e+06</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.111108e+10</td>\n",
       "      <td>8.357538e+06</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.998660e+10</td>\n",
       "      <td>1.814854e+07</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         COUPON_UPC    PRODUCT_ID       CAMPAIGN\n",
       "count  1.245480e+05  1.245480e+05  124548.000000\n",
       "mean   2.198225e+10  4.651277e+06      15.855935\n",
       "std    1.961641e+10  4.843450e+06       6.015524\n",
       "min    1.000009e+10  2.567100e+04       1.000000\n",
       "25%    1.000009e+10  9.593030e+05      13.000000\n",
       "50%    1.000009e+10  1.411451e+06      14.000000\n",
       "75%    5.111108e+10  8.357538e+06      18.000000\n",
       "max    5.998660e+10  1.814854e+07      30.000000"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_RAW.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "372a9a7d-2c95-487c-a4af-28ff756931f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AGE_DESC               0\n",
       "MARITAL_STATUS_CODE    0\n",
       "INCOME_DESC            0\n",
       "HOMEOWNER_DESC         0\n",
       "HH_COMP_DESC           0\n",
       "HOUSEHOLD_SIZE_DESC    0\n",
       "KID_CATEGORY_DESC      0\n",
       "HOUSEHOLD_KEY          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DEMOGRAPHIC_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b472af39-a060-4887-a38f-cf184948db20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2500.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1250.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>721.83216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>625.75000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1250.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1875.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2500.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       HOUSEHOLD_KEY\n",
       "count     2500.00000\n",
       "mean      1250.50000\n",
       "std        721.83216\n",
       "min          1.00000\n",
       "25%        625.75000\n",
       "50%       1250.50000\n",
       "75%       1875.25000\n",
       "max       2500.00000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DEMOGRAPHIC_RAW.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e0404258-61f9-4112-a286-9be440a49056",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HOUSEHOLD_KEY        0\n",
       "BASKET_ID            0\n",
       "DAY                  0\n",
       "PRODUCT_ID           0\n",
       "QUANTITY             0\n",
       "SALES_VALUE          0\n",
       "STORE_ID             0\n",
       "RETAIL_DESC          0\n",
       "TRANS_TIME           0\n",
       "WEEK_NO              0\n",
       "COUPON_DISC          0\n",
       "COUPON_MATCH_DISC    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "15bd1461-1e1d-4663-bd44-a42a6dd93602",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "      <td>2.595732e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.271953e+03</td>\n",
       "      <td>3.402620e+10</td>\n",
       "      <td>3.887562e+02</td>\n",
       "      <td>2.891435e+06</td>\n",
       "      <td>1.004286e+02</td>\n",
       "      <td>3.104120e+00</td>\n",
       "      <td>3.142673e+03</td>\n",
       "      <td>-5.387054e-01</td>\n",
       "      <td>1.561586e+03</td>\n",
       "      <td>5.622150e+01</td>\n",
       "      <td>-1.803152e-02</td>\n",
       "      <td>-2.578463e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.260660e+02</td>\n",
       "      <td>4.711649e+09</td>\n",
       "      <td>1.897210e+02</td>\n",
       "      <td>3.837404e+06</td>\n",
       "      <td>1.153436e+03</td>\n",
       "      <td>4.182274e+00</td>\n",
       "      <td>8.937113e+03</td>\n",
       "      <td>1.249191e+00</td>\n",
       "      <td>3.998378e+02</td>\n",
       "      <td>2.710223e+01</td>\n",
       "      <td>2.276589e-01</td>\n",
       "      <td>5.232086e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.698485e+10</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.567100e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-1.800000e+02</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-5.600000e+01</td>\n",
       "      <td>-8.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.560000e+02</td>\n",
       "      <td>3.040805e+10</td>\n",
       "      <td>2.290000e+02</td>\n",
       "      <td>9.174590e+05</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.290000e+00</td>\n",
       "      <td>3.300000e+02</td>\n",
       "      <td>-6.900000e-01</td>\n",
       "      <td>1.308000e+03</td>\n",
       "      <td>3.300000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.272000e+03</td>\n",
       "      <td>3.276081e+10</td>\n",
       "      <td>3.900000e+02</td>\n",
       "      <td>1.028816e+06</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.720000e+02</td>\n",
       "      <td>-1.000000e-02</td>\n",
       "      <td>1.613000e+03</td>\n",
       "      <td>5.600000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.913000e+03</td>\n",
       "      <td>4.012685e+10</td>\n",
       "      <td>5.530000e+02</td>\n",
       "      <td>1.133018e+06</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.490000e+00</td>\n",
       "      <td>4.220000e+02</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.843000e+03</td>\n",
       "      <td>8.000000e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.500000e+03</td>\n",
       "      <td>4.230536e+10</td>\n",
       "      <td>7.110000e+02</td>\n",
       "      <td>1.831630e+07</td>\n",
       "      <td>8.963800e+04</td>\n",
       "      <td>8.400000e+02</td>\n",
       "      <td>3.428000e+04</td>\n",
       "      <td>3.990000e+00</td>\n",
       "      <td>2.359000e+03</td>\n",
       "      <td>1.020000e+02</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       HOUSEHOLD_KEY     BASKET_ID           DAY    PRODUCT_ID      QUANTITY  \\\n",
       "count   2.595732e+06  2.595732e+06  2.595732e+06  2.595732e+06  2.595732e+06   \n",
       "mean    1.271953e+03  3.402620e+10  3.887562e+02  2.891435e+06  1.004286e+02   \n",
       "std     7.260660e+02  4.711649e+09  1.897210e+02  3.837404e+06  1.153436e+03   \n",
       "min     1.000000e+00  2.698485e+10  1.000000e+00  2.567100e+04  0.000000e+00   \n",
       "25%     6.560000e+02  3.040805e+10  2.290000e+02  9.174590e+05  1.000000e+00   \n",
       "50%     1.272000e+03  3.276081e+10  3.900000e+02  1.028816e+06  1.000000e+00   \n",
       "75%     1.913000e+03  4.012685e+10  5.530000e+02  1.133018e+06  1.000000e+00   \n",
       "max     2.500000e+03  4.230536e+10  7.110000e+02  1.831630e+07  8.963800e+04   \n",
       "\n",
       "        SALES_VALUE      STORE_ID   RETAIL_DESC    TRANS_TIME       WEEK_NO  \\\n",
       "count  2.595732e+06  2.595732e+06  2.595732e+06  2.595732e+06  2.595732e+06   \n",
       "mean   3.104120e+00  3.142673e+03 -5.387054e-01  1.561586e+03  5.622150e+01   \n",
       "std    4.182274e+00  8.937113e+03  1.249191e+00  3.998378e+02  2.710223e+01   \n",
       "min    0.000000e+00  1.000000e+00 -1.800000e+02  0.000000e+00  1.000000e+00   \n",
       "25%    1.290000e+00  3.300000e+02 -6.900000e-01  1.308000e+03  3.300000e+01   \n",
       "50%    2.000000e+00  3.720000e+02 -1.000000e-02  1.613000e+03  5.600000e+01   \n",
       "75%    3.490000e+00  4.220000e+02  0.000000e+00  1.843000e+03  8.000000e+01   \n",
       "max    8.400000e+02  3.428000e+04  3.990000e+00  2.359000e+03  1.020000e+02   \n",
       "\n",
       "        COUPON_DISC  COUPON_MATCH_DISC  \n",
       "count  2.595732e+06       2.595732e+06  \n",
       "mean  -1.803152e-02      -2.578463e-03  \n",
       "std    2.276589e-01       5.232086e-02  \n",
       "min   -5.600000e+01      -8.000000e+00  \n",
       "25%    0.000000e+00       0.000000e+00  \n",
       "50%    0.000000e+00       0.000000e+00  \n",
       "75%    0.000000e+00       0.000000e+00  \n",
       "max    0.000000e+00       0.000000e+00  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d9bcf36-33b4-4662-a5ff-bff42fb4a1b9",
   "metadata": {},
   "source": [
    "## Data Modification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "70d973c9-18cf-4717-a6f5-987d842d97df",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime,timedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "fafe9ac4-fb4c-4e6a-9646-0b7de4be8ffb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2019-01-01 00:00:00')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert datetime to timestamp\n",
    "start_date = pd.to_datetime('2019-01-01')\n",
    "start_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "64f3f3d4-0e27-4478-8f38-c3f6ea4d1761",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1873</td>\n",
       "      <td>29330097522</td>\n",
       "      <td>177</td>\n",
       "      <td>1135681</td>\n",
       "      <td>1</td>\n",
       "      <td>1.29</td>\n",
       "      <td>320</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>828427</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>334</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  DAY  PRODUCT_ID  QUANTITY  SALES_VALUE  \\\n",
       "0           2056  29330027026  177     1106523         1         2.32   \n",
       "1           2056  29330027026  177     5567325         1         2.69   \n",
       "2           2056  29330027027  177     1106523         1         2.32   \n",
       "3           1873  29330097522  177     1135681         1         1.29   \n",
       "4           1602  29339301484  177      828427         1         0.22   \n",
       "\n",
       "   STORE_ID  RETAIL_DESC  TRANS_TIME  WEEK_NO  COUPON_DISC  COUPON_MATCH_DISC  \n",
       "0       341         0.00           4       26            0                  0  \n",
       "1       341         0.00           4       26            0                  0  \n",
       "2       341         0.00           4       26            0                  0  \n",
       "3       320         0.00           1       26            0                  0  \n",
       "4       334        -0.07        1537       26            0                  0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "3a468d8b-1558-48df-9990-03362d3a5b9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "TRANSACTION_RAW['Date'] = start_date + pd.to_timedelta(TRANSACTION_RAW['DAY'],unit = 'D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "58a6eb39-3392-4167-9f07-74b83393d5ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2019-06-27\n",
       "1    2019-06-27\n",
       "2    2019-06-27\n",
       "3    2019-06-27\n",
       "4    2019-06-27\n",
       "5    2019-06-27\n",
       "6    2019-06-27\n",
       "7    2019-06-27\n",
       "8    2019-06-27\n",
       "9    2019-06-27\n",
       "10   2019-06-27\n",
       "11   2019-06-27\n",
       "12   2019-06-27\n",
       "13   2019-06-27\n",
       "14   2019-06-27\n",
       "15   2019-06-27\n",
       "16   2019-06-27\n",
       "17   2019-06-27\n",
       "18   2019-06-27\n",
       "19   2019-06-27\n",
       "Name: Date, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW['Date'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "659030ed-47ff-4e1c-8863-9a3a9396cf7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>659</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>547</td>\n",
       "      <td>708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>659</td>\n",
       "      <td>691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>615</td>\n",
       "      <td>685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>646</td>\n",
       "      <td>684</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  START_DAY  END_DAY\n",
       "0       TypeB        24        659      719\n",
       "1       TypeC        15        547      708\n",
       "2       TypeB        25        659      691\n",
       "3       TypeC        20        615      685\n",
       "4       TypeB        23        646      684"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "0b124f75-7dda-4f7e-8caf-aa6fc57a67bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW['Start_Date'] = start_date + pd.to_timedelta(CAMPAIGN_DESC_RAW['START_DAY'],unit = 'D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "eb495e86-8578-46b1-93ee-55574bcba864",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW['End_Date'] = start_date + pd.to_timedelta(CAMPAIGN_DESC_RAW['END_DAY'],unit = 'D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "9e84a787-7796-43c6-b6d7-fd7ce1b47fb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW['CAMPAIGN_Duration'] = CAMPAIGN_DESC_RAW['END_DAY'] - CAMPAIGN_DESC_RAW['START_DAY']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9a4b49fd-7bd9-4752-82f6-896dba4a45c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW.rename(columns = {\"CAMPAIGN_Duration\": \"Campaign_Duration\"}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4df76a97-40a6-486a-8d36-eadb4121a577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>659</td>\n",
       "      <td>719</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>547</td>\n",
       "      <td>708</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>659</td>\n",
       "      <td>691</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>615</td>\n",
       "      <td>685</td>\n",
       "      <td>2020-09-07</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>646</td>\n",
       "      <td>684</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>21</td>\n",
       "      <td>624</td>\n",
       "      <td>656</td>\n",
       "      <td>2020-09-16</td>\n",
       "      <td>2020-10-18</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>22</td>\n",
       "      <td>624</td>\n",
       "      <td>656</td>\n",
       "      <td>2020-09-16</td>\n",
       "      <td>2020-10-18</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>TypeA</td>\n",
       "      <td>18</td>\n",
       "      <td>587</td>\n",
       "      <td>642</td>\n",
       "      <td>2020-08-10</td>\n",
       "      <td>2020-10-04</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>19</td>\n",
       "      <td>603</td>\n",
       "      <td>635</td>\n",
       "      <td>2020-08-26</td>\n",
       "      <td>2020-09-27</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>17</td>\n",
       "      <td>575</td>\n",
       "      <td>607</td>\n",
       "      <td>2020-07-29</td>\n",
       "      <td>2020-08-30</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  START_DAY  END_DAY Start_Date   End_Date  \\\n",
       "0       TypeB        24        659      719 2020-10-21 2020-12-20   \n",
       "1       TypeC        15        547      708 2020-07-01 2020-12-09   \n",
       "2       TypeB        25        659      691 2020-10-21 2020-11-22   \n",
       "3       TypeC        20        615      685 2020-09-07 2020-11-16   \n",
       "4       TypeB        23        646      684 2020-10-08 2020-11-15   \n",
       "5       TypeB        21        624      656 2020-09-16 2020-10-18   \n",
       "6       TypeB        22        624      656 2020-09-16 2020-10-18   \n",
       "7       TypeA        18        587      642 2020-08-10 2020-10-04   \n",
       "8       TypeB        19        603      635 2020-08-26 2020-09-27   \n",
       "9       TypeB        17        575      607 2020-07-29 2020-08-30   \n",
       "\n",
       "   Campaign_Duration  \n",
       "0                 60  \n",
       "1                161  \n",
       "2                 32  \n",
       "3                 70  \n",
       "4                 38  \n",
       "5                 32  \n",
       "6                 32  \n",
       "7                 55  \n",
       "8                 32  \n",
       "9                 32  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0b283e15-a0ea-4801-8399-b4fc78c9fe8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>DAY</th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>421</td>\n",
       "      <td>10000085364</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>421</td>\n",
       "      <td>51700010076</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>427</td>\n",
       "      <td>54200000033</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>597</td>\n",
       "      <td>10000085476</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>597</td>\n",
       "      <td>54200029176</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY  DAY   COUPON_UPC  CAMPAIGN\n",
       "0              1  421  10000085364         8\n",
       "1              1  421  51700010076         8\n",
       "2              1  427  54200000033         8\n",
       "3              1  597  10000085476        18\n",
       "4              1  597  54200029176        18"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "75738ef1-764f-4641-bf7b-5cf87ea15c13",
   "metadata": {},
   "outputs": [],
   "source": [
    "COUPON_REDEMPT_RAW['Date'] = start_date + pd.to_timedelta(COUPON_REDEMPT_RAW['DAY'],unit = 'D')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6faf381b-a367-4fc6-aa65-0909bdcffea8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>DAY</th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>421</td>\n",
       "      <td>10000085364</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>421</td>\n",
       "      <td>51700010076</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>427</td>\n",
       "      <td>54200000033</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-03-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>597</td>\n",
       "      <td>10000085476</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-08-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>597</td>\n",
       "      <td>54200029176</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-08-20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY  DAY   COUPON_UPC  CAMPAIGN       Date\n",
       "0              1  421  10000085364         8 2020-02-26\n",
       "1              1  421  51700010076         8 2020-02-26\n",
       "2              1  427  54200000033         8 2020-03-03\n",
       "3              1  597  10000085476        18 2020-08-20\n",
       "4              1  597  54200029176        18 2020-08-20"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "87d67d28-6b2a-4401-a6e4-4fd8f14023c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-12 00:00:00')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW['Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "3b05c941-bc94-4e55-a26c-4943435829ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-20 00:00:00')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW['End_Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "e8211105-4598-4f87-9268-51480803c68a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-05 00:00:00')"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW['Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "8f2c6e7a-c3ac-4f79-a02e-ded515a71f95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45-54    901\n",
       "35-44    594\n",
       "25-34    445\n",
       "65+      230\n",
       "55-64    187\n",
       "19-24    143\n",
       "Name: AGE_DESC, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DEMOGRAPHIC_RAW['AGE_DESC'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "04a92ad5-6f43-4ab6-b363-82f4c5fbf31d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2     1004\n",
       "1      783\n",
       "3      338\n",
       "5+     206\n",
       "4      169\n",
       "Name: HOUSEHOLD_SIZE_DESC, dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DEMOGRAPHIC_RAW['HOUSEHOLD_SIZE_DESC'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "d238e7d3-71b3-4478-8302-e701db288f48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46.6"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW['Campaign_Duration'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "07f338d6-9649-407c-b7a7-cbad066c524a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>659</td>\n",
       "      <td>719</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>547</td>\n",
       "      <td>708</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>659</td>\n",
       "      <td>691</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>615</td>\n",
       "      <td>685</td>\n",
       "      <td>2020-09-07</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>646</td>\n",
       "      <td>684</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  START_DAY  END_DAY Start_Date   End_Date  \\\n",
       "0       TypeB        24        659      719 2020-10-21 2020-12-20   \n",
       "1       TypeC        15        547      708 2020-07-01 2020-12-09   \n",
       "2       TypeB        25        659      691 2020-10-21 2020-11-22   \n",
       "3       TypeC        20        615      685 2020-09-07 2020-11-16   \n",
       "4       TypeB        23        646      684 2020-10-08 2020-11-15   \n",
       "\n",
       "   Campaign_Duration  \n",
       "0                 60  \n",
       "1                161  \n",
       "2                 32  \n",
       "3                 70  \n",
       "4                 38  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "90255c82-bb36-4e9f-a7ae-ea737fbd2dcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='CAMPAIGN', ylabel='Campaign_Duration'>"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "sns.barplot(x='CAMPAIGN',y='Campaign_Duration',data = CAMPAIGN_DESC_RAW)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "839f8678-65fe-41d6-874c-dee531dcd1e1",
   "metadata": {},
   "source": [
    "Campaign 15 lasted more than 160 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "7ae01aa3-3420-4cec-a7a5-05743ee40ba8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>TypeA</th>\n",
       "      <td>5</td>\n",
       "      <td>47.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TypeB</th>\n",
       "      <td>19</td>\n",
       "      <td>37.631579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TypeC</th>\n",
       "      <td>6</td>\n",
       "      <td>74.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CAMPAIGN  Campaign_Duration\n",
       "DESCRIPTION                             \n",
       "TypeA               5          47.200000\n",
       "TypeB              19          37.631579\n",
       "TypeC               6          74.500000"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.groupby('DESCRIPTION').aggregate({'CAMPAIGN':'count','Campaign_Duration':'mean'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "f78c879f-1406-4a31-82bf-b31f112b0e63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>659</td>\n",
       "      <td>719</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>547</td>\n",
       "      <td>708</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>659</td>\n",
       "      <td>691</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>615</td>\n",
       "      <td>685</td>\n",
       "      <td>2020-09-07</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>646</td>\n",
       "      <td>684</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  START_DAY  END_DAY Start_Date   End_Date  \\\n",
       "0       TypeB        24        659      719 2020-10-21 2020-12-20   \n",
       "1       TypeC        15        547      708 2020-07-01 2020-12-09   \n",
       "2       TypeB        25        659      691 2020-10-21 2020-11-22   \n",
       "3       TypeC        20        615      685 2020-09-07 2020-11-16   \n",
       "4       TypeB        23        646      684 2020-10-08 2020-11-15   \n",
       "\n",
       "   Campaign_Duration  \n",
       "0                 60  \n",
       "1                161  \n",
       "2                 32  \n",
       "3                 70  \n",
       "4                 38  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f130c75a-dd19-41f7-ae5c-571c831785ec",
   "metadata": {},
   "source": [
    "There are 19 TypeB Campaign whose average length was 38 days. In composition there are 5 TypeA Campaign of 47 days and 6 TypeC Campaign of 75 days."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b1ad4f24-70b6-4512-a970-dffe7b3b5630",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW['Start_Month'] = CAMPAIGN_DESC_RAW['Start_Date'].dt.strftime('%m')\n",
    "CAMPAIGN_DESC_RAW['Start_Year'] = CAMPAIGN_DESC_RAW['Start_Date'].dt.strftime('%Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "6c2b5919-8c5d-47a9-82ee-9805db11c881",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW['End_Month'] = CAMPAIGN_DESC_RAW['End_Date'].dt.strftime('%m')\n",
    "CAMPAIGN_DESC_RAW['End_Year'] = CAMPAIGN_DESC_RAW['End_Date'].dt.strftime('%Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "95a9ec4c-086d-478b-a1e6-d22bab295383",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>659</td>\n",
       "      <td>719</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>547</td>\n",
       "      <td>708</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "      <td>07</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>659</td>\n",
       "      <td>691</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>615</td>\n",
       "      <td>685</td>\n",
       "      <td>2020-09-07</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>70</td>\n",
       "      <td>09</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>646</td>\n",
       "      <td>684</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>38</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  START_DAY  END_DAY Start_Date   End_Date  \\\n",
       "0       TypeB        24        659      719 2020-10-21 2020-12-20   \n",
       "1       TypeC        15        547      708 2020-07-01 2020-12-09   \n",
       "2       TypeB        25        659      691 2020-10-21 2020-11-22   \n",
       "3       TypeC        20        615      685 2020-09-07 2020-11-16   \n",
       "4       TypeB        23        646      684 2020-10-08 2020-11-15   \n",
       "\n",
       "   Campaign_Duration Start_Month Start_Year End_Month End_Year  \n",
       "0                 60          10       2020        12     2020  \n",
       "1                161          07       2020        12     2020  \n",
       "2                 32          10       2020        11     2020  \n",
       "3                 70          09       2020        11     2020  \n",
       "4                 38          10       2020        11     2020  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3dff6bb2-316b-4bfa-9369-30effe727094",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DESCRIPTION                  object\n",
       "CAMPAIGN                       int8\n",
       "START_DAY                     int16\n",
       "END_DAY                       int16\n",
       "Start_Date           datetime64[ns]\n",
       "End_Date             datetime64[ns]\n",
       "Campaign_Duration             int16\n",
       "Start_Month                  object\n",
       "Start_Year                   object\n",
       "End_Month                    object\n",
       "End_Year                     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "dfb39525-9703-41d4-b7d0-b95ea7a884b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1584"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_RAW['HOUSEHOLD_KEY'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "0fbc21dc-f01c-41e0-aa6b-3d1348470e42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2500"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW['HOUSEHOLD_KEY'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "427365a1-6ee4-48dd-9e58-e92432471632",
   "metadata": {},
   "source": [
    "There are 1584 households have participated to the campaign out of total 2494 camapign"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cfeefcb3-5c45-4c2b-b20c-4125f5cf0ca4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of Households Reached to')"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(15,5))\n",
    "CAMPAIGN_RAW.groupby('CAMPAIGN')['HOUSEHOLD_KEY'].count().plot.bar()\n",
    "plt.ylabel('Number of Households Reached to')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "901d15bb-0f6f-4339-a12e-daf9194fab04",
   "metadata": {},
   "source": [
    "In Campaign 18 maximum number of Households are participated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "f6ab1e07-77df-4752-bddc-12f0a2a651ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1135"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_RAW['COUPON_UPC'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "86bea6e7-18ff-4d39-b7aa-2a9a2869e0c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000089061</td>\n",
       "      <td>27160</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10000089064</td>\n",
       "      <td>27754</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10000089073</td>\n",
       "      <td>28897</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    COUPON_UPC  PRODUCT_ID  CAMPAIGN\n",
       "0  10000089061       27160         4\n",
       "1  10000089064       27754         9\n",
       "2  10000089073       28897        12"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "809b9d5b-6425-49a9-bd0e-ec77bf775c3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Coupon_given = COUPON_RAW.groupby('CAMPAIGN').aggregate(Total_product=('PRODUCT_ID','nunique'), \n",
    "                                                        Total_coupon_given= ('COUPON_UPC', 'nunique'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "df25acd4-2cee-4cb6-a58a-5b5d95ec0260",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>35616</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>35513</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17178</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>3396</td>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>3205</td>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1917</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1887</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1025</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>826</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>825</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Total_product  Total_coupon_given\n",
       "CAMPAIGN                                   \n",
       "13                35616                 207\n",
       "18                35513                 209\n",
       "8                 17178                 209\n",
       "26                 3396                 181\n",
       "30                 3205                 181\n",
       "22                 1917                  21\n",
       "24                 1887                   2\n",
       "16                 1025                  13\n",
       "25                  826                  17\n",
       "9                   825                  18"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_given.sort_values(by = 'Total_product', ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "dba4e3ca-44f9-44a9-bd14-0b4131ce68f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>383</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>301</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>506</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>443</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>259</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17178</td>\n",
       "      <td>209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>825</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>393</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Total_product  Total_coupon_given\n",
       "CAMPAIGN                                   \n",
       "1                   383                  11\n",
       "2                   301                  16\n",
       "3                   506                  34\n",
       "4                   200                  12\n",
       "5                   443                  11\n",
       "6                    18                   1\n",
       "7                   259                   8\n",
       "8                 17178                 209\n",
       "9                   825                  18\n",
       "10                  393                  14"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_given.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "00426cb5-f7e6-4dc3-8252-64b9ea9a949b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Coupon_given = Coupon_given.merge(right = CAMPAIGN_DESC_RAW, on ='CAMPAIGN', how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "5b0e7b77-a731-41af-b7dc-2c37103033e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>346</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-13</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>301</td>\n",
       "      <td>16</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>351</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-18</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>506</td>\n",
       "      <td>34</td>\n",
       "      <td>TypeC</td>\n",
       "      <td>356</td>\n",
       "      <td>412</td>\n",
       "      <td>2019-12-23</td>\n",
       "      <td>2020-02-17</td>\n",
       "      <td>56</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>372</td>\n",
       "      <td>404</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>2020-02-09</td>\n",
       "      <td>32</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>443</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>377</td>\n",
       "      <td>411</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>2020-02-16</td>\n",
       "      <td>34</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>TypeC</td>\n",
       "      <td>393</td>\n",
       "      <td>425</td>\n",
       "      <td>2020-01-29</td>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>32</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>03</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>259</td>\n",
       "      <td>8</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>398</td>\n",
       "      <td>432</td>\n",
       "      <td>2020-02-03</td>\n",
       "      <td>2020-03-08</td>\n",
       "      <td>34</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>03</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>17178</td>\n",
       "      <td>209</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>412</td>\n",
       "      <td>460</td>\n",
       "      <td>2020-02-17</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>48</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>825</td>\n",
       "      <td>18</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>435</td>\n",
       "      <td>467</td>\n",
       "      <td>2020-03-11</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>32</td>\n",
       "      <td>03</td>\n",
       "      <td>2020</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>393</td>\n",
       "      <td>14</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>463</td>\n",
       "      <td>495</td>\n",
       "      <td>2020-04-08</td>\n",
       "      <td>2020-05-10</td>\n",
       "      <td>32</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "      <td>05</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CAMPAIGN  Total_product  Total_coupon_given DESCRIPTION  START_DAY  \\\n",
       "0         1            383                  11       TypeB        346   \n",
       "1         2            301                  16       TypeB        351   \n",
       "2         3            506                  34       TypeC        356   \n",
       "3         4            200                  12       TypeB        372   \n",
       "4         5            443                  11       TypeB        377   \n",
       "5         6             18                   1       TypeC        393   \n",
       "6         7            259                   8       TypeB        398   \n",
       "7         8          17178                 209       TypeA        412   \n",
       "8         9            825                  18       TypeB        435   \n",
       "9        10            393                  14       TypeB        463   \n",
       "\n",
       "   END_DAY Start_Date   End_Date  Campaign_Duration Start_Month Start_Year  \\\n",
       "0      383 2019-12-13 2020-01-19                 37          12       2019   \n",
       "1      383 2019-12-18 2020-01-19                 32          12       2019   \n",
       "2      412 2019-12-23 2020-02-17                 56          12       2019   \n",
       "3      404 2020-01-08 2020-02-09                 32          01       2020   \n",
       "4      411 2020-01-13 2020-02-16                 34          01       2020   \n",
       "5      425 2020-01-29 2020-03-01                 32          01       2020   \n",
       "6      432 2020-02-03 2020-03-08                 34          02       2020   \n",
       "7      460 2020-02-17 2020-04-05                 48          02       2020   \n",
       "8      467 2020-03-11 2020-04-12                 32          03       2020   \n",
       "9      495 2020-04-08 2020-05-10                 32          04       2020   \n",
       "\n",
       "  End_Month End_Year  \n",
       "0        01     2020  \n",
       "1        01     2020  \n",
       "2        02     2020  \n",
       "3        02     2020  \n",
       "4        02     2020  \n",
       "5        03     2020  \n",
       "6        03     2020  \n",
       "7        04     2020  \n",
       "8        04     2020  \n",
       "9        05     2020  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_given.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "d1bb587f-01df-4371-825f-5a6e3e729dca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CAMPAIGN', 'Total_product', 'Total_coupon_given', 'DESCRIPTION',\n",
       "       'START_DAY', 'END_DAY', 'Start_Date', 'End_Date', 'Campaign_Duration',\n",
       "       'Start_Month', 'Start_Year', 'End_Month', 'End_Year'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_given.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "ac5f2b31-4bde-474d-b24e-9b3527e1bb76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Year</th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>35616</td>\n",
       "      <td>207</td>\n",
       "      <td>05</td>\n",
       "      <td>07</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>35513</td>\n",
       "      <td>209</td>\n",
       "      <td>08</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>17178</td>\n",
       "      <td>209</td>\n",
       "      <td>02</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>3396</td>\n",
       "      <td>181</td>\n",
       "      <td>08</td>\n",
       "      <td>09</td>\n",
       "      <td>2019</td>\n",
       "      <td>2019</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>3205</td>\n",
       "      <td>181</td>\n",
       "      <td>11</td>\n",
       "      <td>01</td>\n",
       "      <td>2019</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>1917</td>\n",
       "      <td>21</td>\n",
       "      <td>09</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>1887</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>1025</td>\n",
       "      <td>13</td>\n",
       "      <td>07</td>\n",
       "      <td>08</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>826</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>825</td>\n",
       "      <td>18</td>\n",
       "      <td>03</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "      <td>2020</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    CAMPAIGN  Total_product  Total_coupon_given Start_Month End_Month  \\\n",
       "12        13          35616                 207          05        07   \n",
       "17        18          35513                 209          08        10   \n",
       "7          8          17178                 209          02        04   \n",
       "25        26           3396                 181          08        09   \n",
       "29        30           3205                 181          11        01   \n",
       "21        22           1917                  21          09        10   \n",
       "23        24           1887                   2          10        12   \n",
       "15        16           1025                  13          07        08   \n",
       "24        25            826                  17          10        11   \n",
       "8          9            825                  18          03        04   \n",
       "\n",
       "   Start_Year End_Year DESCRIPTION  Campaign_Duration  \n",
       "12       2020     2020       TypeA                 47  \n",
       "17       2020     2020       TypeA                 55  \n",
       "7        2020     2020       TypeA                 48  \n",
       "25       2019     2019       TypeA                 40  \n",
       "29       2019     2020       TypeA                 46  \n",
       "21       2020     2020       TypeB                 32  \n",
       "23       2020     2020       TypeB                 60  \n",
       "15       2020     2020       TypeB                 32  \n",
       "24       2020     2020       TypeB                 32  \n",
       "8        2020     2020       TypeB                 32  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_given.loc[:,('CAMPAIGN', 'Total_product', 'Total_coupon_given', 'Start_Month', 'End_Month', 'Start_Year', 'End_Year'\n",
    "                   , 'DESCRIPTION', 'Campaign_Duration')].sort_values(by = 'Total_product', ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a3a0c89-9bdf-445a-bb9d-3a3e3d96cff0",
   "metadata": {},
   "source": [
    "Campaign 13, 18 and 8 are the one with most product in them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "ea2283d5-461d-4581-a23c-457d7269ae7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Coupon_product = COUPON_RAW.merge(right = PRODUCT_RAW, on = 'PRODUCT_ID', how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "d37dacaf-977f-4539-a6f3-b54cbf1469a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>MANUFACTURER</th>\n",
       "      <th>DEPARTMENT</th>\n",
       "      <th>BRAND</th>\n",
       "      <th>COMMODITY_DESC</th>\n",
       "      <th>SUB_COMMODITY_DESC</th>\n",
       "      <th>CURR_SIZE_OF_PRODUCT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000089061</td>\n",
       "      <td>27160</td>\n",
       "      <td>4</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>SHORTENING/OIL</td>\n",
       "      <td>VEGETABLE/SALAD OIL</td>\n",
       "      <td>48 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10000089064</td>\n",
       "      <td>27754</td>\n",
       "      <td>9</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>FRZN VEGETABLE/VEG DSH</td>\n",
       "      <td>FRZN BAGGED VEGETABLES - PLAIN</td>\n",
       "      <td>16 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10000089073</td>\n",
       "      <td>28897</td>\n",
       "      <td>12</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>EGGS</td>\n",
       "      <td>EGGS - X-LARGE</td>\n",
       "      <td>A D   1 DZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>51800009050</td>\n",
       "      <td>28919</td>\n",
       "      <td>28</td>\n",
       "      <td>236</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>REFRGRATD DOUGH PRODUCTS</td>\n",
       "      <td>REFRIGERATED COOKIES-CHUB</td>\n",
       "      <td>16.5 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>52100000076</td>\n",
       "      <td>28929</td>\n",
       "      <td>25</td>\n",
       "      <td>317</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CHEESE</td>\n",
       "      <td>STRING CHEESE</td>\n",
       "      <td>AB    8 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>52100000031</td>\n",
       "      <td>28929</td>\n",
       "      <td>22</td>\n",
       "      <td>317</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CHEESE</td>\n",
       "      <td>STRING CHEESE</td>\n",
       "      <td>AB    8 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>52100000033</td>\n",
       "      <td>28929</td>\n",
       "      <td>9</td>\n",
       "      <td>317</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CHEESE</td>\n",
       "      <td>STRING CHEESE</td>\n",
       "      <td>AB    8 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>52100026076</td>\n",
       "      <td>28929</td>\n",
       "      <td>28</td>\n",
       "      <td>317</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CHEESE</td>\n",
       "      <td>STRING CHEESE</td>\n",
       "      <td>AB    8 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>52100020075</td>\n",
       "      <td>28929</td>\n",
       "      <td>1</td>\n",
       "      <td>317</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CHEESE</td>\n",
       "      <td>STRING CHEESE</td>\n",
       "      <td>AB    8 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>52100000076</td>\n",
       "      <td>29096</td>\n",
       "      <td>25</td>\n",
       "      <td>317</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CHEESE</td>\n",
       "      <td>STRING CHEESE</td>\n",
       "      <td>AB    8 OZ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    COUPON_UPC  PRODUCT_ID  CAMPAIGN  MANUFACTURER DEPARTMENT     BRAND  \\\n",
       "0  10000089061       27160         4            69    GROCERY   Private   \n",
       "1  10000089064       27754         9            69    GROCERY   Private   \n",
       "2  10000089073       28897        12            69    GROCERY   Private   \n",
       "3  51800009050       28919        28           236    GROCERY  National   \n",
       "4  52100000076       28929        25           317    GROCERY  National   \n",
       "5  52100000031       28929        22           317    GROCERY  National   \n",
       "6  52100000033       28929         9           317    GROCERY  National   \n",
       "7  52100026076       28929        28           317    GROCERY  National   \n",
       "8  52100020075       28929         1           317    GROCERY  National   \n",
       "9  52100000076       29096        25           317    GROCERY  National   \n",
       "\n",
       "             COMMODITY_DESC              SUB_COMMODITY_DESC  \\\n",
       "0            SHORTENING/OIL             VEGETABLE/SALAD OIL   \n",
       "1    FRZN VEGETABLE/VEG DSH  FRZN BAGGED VEGETABLES - PLAIN   \n",
       "2                      EGGS                  EGGS - X-LARGE   \n",
       "3  REFRGRATD DOUGH PRODUCTS       REFRIGERATED COOKIES-CHUB   \n",
       "4                    CHEESE                   STRING CHEESE   \n",
       "5                    CHEESE                   STRING CHEESE   \n",
       "6                    CHEESE                   STRING CHEESE   \n",
       "7                    CHEESE                   STRING CHEESE   \n",
       "8                    CHEESE                   STRING CHEESE   \n",
       "9                    CHEESE                   STRING CHEESE   \n",
       "\n",
       "  CURR_SIZE_OF_PRODUCT  \n",
       "0                48 OZ  \n",
       "1                16 OZ  \n",
       "2           A D   1 DZ  \n",
       "3              16.5 OZ  \n",
       "4           AB    8 OZ  \n",
       "5           AB    8 OZ  \n",
       "6           AB    8 OZ  \n",
       "7           AB    8 OZ  \n",
       "8           AB    8 OZ  \n",
       "9           AB    8 OZ  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_product.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "f1eda832-d44f-4a46-97ae-1d928e2c7d62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "COUPON_UPC              0\n",
       "PRODUCT_ID              0\n",
       "CAMPAIGN                0\n",
       "MANUFACTURER            0\n",
       "DEPARTMENT              0\n",
       "BRAND                   0\n",
       "COMMODITY_DESC          0\n",
       "SUB_COMMODITY_DESC      0\n",
       "CURR_SIZE_OF_PRODUCT    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_product.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e29efe72-9b6b-4a52-99ac-64ecc5541da2",
   "metadata": {},
   "source": [
    "**Top 10 product on which the Coupon has been applied**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "31828cb5-500f-4ed8-a56d-0efac6a9d7c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HAIR CARE PRODUCTS        6261\n",
       "MAKEUP AND TREATMENT      5585\n",
       "FRZN MEAT/MEAT DINNERS    4893\n",
       "FROZEN PIZZA              3658\n",
       "BEEF                      3314\n",
       "ICE CREAM/MILK/SHERBTS    3257\n",
       "CHEESE                    3146\n",
       "YOGURT                    2460\n",
       "ORAL HYGIENE PRODUCTS     2437\n",
       "LUNCHMEAT                 2425\n",
       "Name: COMMODITY_DESC, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_product['COMMODITY_DESC'].value_counts().head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "748edbcb-ea77-47f5-8edc-500fe52b75b0",
   "metadata": {},
   "source": [
    "**Most prominent products among coupons created are bathroom products such as hair care and makeup.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "799ab62c-ea98-4979-b497-8da549af9979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2318, 5)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "1932039f-5326-4895-9274-7c336b00c834",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['HOUSEHOLD_KEY', 'DAY', 'COUPON_UPC', 'CAMPAIGN', 'Date'], dtype='object')"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "7c17a782-7c5b-4147-99b7-c25baf04d792",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "556"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW['COUPON_UPC'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8f2f684-ccaa-4409-977a-783077110b0d",
   "metadata": {},
   "source": [
    "Only 556 Coupons has been used out of 1135"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "25060947-f3c4-43fb-bbd8-d610b9d9744b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='CAMPAIGN'>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAG0CAYAAAAYQdwgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy88F64QAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA88ElEQVR4nO3df3zN9f//8fvZ79/D1H5kbLLCm5Dkjb6Z8jNSqeRXeKNffkSUH3nHeGvEO/Gm9K6PEG/U+130Q0J+pvWDaSUplWFirbLGmG3s+f3DZefitO1sc87stbldL5fX5bLzer6ez9fjnJ0f9/N8nfM6NmOMEQAAgIV4VHYBAAAAf0ZAAQAAlkNAAQAAlkNAAQAAlkNAAQAAlkNAAQAAlkNAAQAAluNV2QVcioKCAh07dkzBwcGy2WyVXQ4AACgDY4xOnTqlqKgoeXg4nyOpkgHl2LFjio6OruwyAADAJUhLS1OdOnWcblMlA0pwcLCkC1cwJCSkkqsBAABlcfLkSUVHR9tfx52pkgGl8LBOSEgIAQUAgCqmLB/P4EOyAADAcggoAADAcggoAADAcqrkZ1AAoKooKChQXl5eZZcBXDY+Pj6lfoW4LAgoAFBB8vLylJqaqoKCgsouBbhsPDw8FBsbKx8fH5fGIaAAQAUwxuj48ePy9PRUdHS0W95RAlZXeCLV48ePq27dui6dTJWAAgAV4Ny5czpz5oyioqIUEBBQ2eUAl81VV12lY8eO6dy5c/L29r7kcYj0AFABzp8/L0kuT3MDVU3hfb7wMXCpCCgAUIH4vTBcadx1nyegAAAAyyGgAAAAy+FDsgBwGcVMXHdZ93doVvfLur/yGDx4sP744w+tXbu2skupluLj49W8eXPNmzevsku5JMygAADs4uPjNWbMmArvA5SGgAIAgEVdyWchJqAAACRdOOSyfft2zZ8/XzabTTabTYcOHdL27dt18803y9fXV5GRkZo4caLOnTvntM/58+c1dOhQxcbGyt/fX9dff73mz59/ybUVFBToueeeU4MGDeTr66u6devq2Weftbfv3btXt912m/z9/RUWFqaHH35Y2dnZ9vbiZnnuvvtuDR482H45JiZG//jHP9SvXz8FBQUpKipKCxYscOhz5MgR3XXXXQoKClJISIh69+6tX375xd6ekJCg5s2ba/ny5YqJiVFoaKj69OmjU6dOlel6xsfHa+TIkRo7dqxq166tTp06SZK+/fZb3XHHHQoKClJ4eLgefPBB/fbbb/Z+p0+f1sCBAxUUFKTIyEg9//zzRcbOy8vT+PHjdc011ygwMFCtW7fWtm3b7O1Lly5VjRo19P777+v6669XQECA7rvvPp0+fVrLli1TTEyMatasqVGjRrn8FeKyqDafQSnLcV0rH4sFgMo2f/58HThwQE2aNNH06dMlXTiXxR133KHBgwfr9ddf13fffaeHHnpIfn5+SkhIKLbPVVddpYKCAtWpU0dvvvmmateuraSkJD388MOKjIxU7969y13bpEmT9Oqrr+qFF17QLbfcouPHj+u7776TJJ05c0Zdu3bVX//6V+3atUsZGRkaNmyYRo4cqaVLl5ZrP3PmzNHTTz+thIQEbdiwQU888YQaNmyoTp06yRiju+++W4GBgdq+fbvOnTun4cOH64EHHnB4of/pp5+0du1avf/++8rMzFTv3r01a9Ysh0DlzLJly/TYY4/pk08+sZ+RuH379nrooYc0d+5c5eTkaMKECerdu7e2bNkiSXrqqae0detWrVmzRhEREXr66aeVnJys5s2b28f929/+pkOHDmn16tWKiorSmjVr1LVrV+3du1dxcXH22/Jf//qXVq9erVOnTqlXr17q1auXatSooQ8++EAHDx7Uvffeq1tuuUUPPPBAuW7b8qo2AQUA4JrQ0FD5+PgoICBAERERkqTJkycrOjpaCxculM1mU8OGDXXs2DFNmDBBU6ZMKbaPJHl6emratGn2y7GxsUpKStKbb75Z7oBy6tQpzZ8/XwsXLtSgQYMkSddee61uueUWSdJ//vMf5eTk6PXXX1dgYKAkaeHChbrzzjv13HPPKTw8vMz7ateunSZOnChJuu666/TJJ5/ohRdeUKdOnfTRRx/p66+/VmpqqqKjoyVJy5cv11/+8hft2rVLrVq1knRhtmfp0qUKDg6WJD344IPavHlzmQNKgwYNNHv2bPvlKVOm6MYbb1RiYqJ93Wuvvabo6GgdOHBAUVFRWrx4sV5//XX7jMuyZctUp04d+/Y//fSTVq1apaNHjyoqKkqS9OSTT+rDDz/UkiVL7GPn5+dr0aJFuvbaayVJ9913n5YvX65ffvlFQUFBaty4sTp06KCtW7cSUAAAlWf//v1q06aNw8m32rVrp+zsbB09elR169Yt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a0BJT0+XJIWHhzusDw8Pt7elp6fLx8dHNWvWLHGbP5s5c6ZCQ0PtS3R0tDvLBgAAFlMh3+Kx2WwOl40xRdb9mbNtJk2apKysLPuSlpbmtloBAID1uDWgRERESFKRmZCMjAz7rEpERITy8vKUmZlZ4jZ/5uvrq5CQEIcFAABUX24NKLGxsYqIiNCmTZvs6/Ly8rR9+3a1bdtWktSyZUt5e3s7bHP8+HF988039m0AAMCVrdzf4snOztaPP/5ov5yamqqUlBTVqlVLdevW1ZgxY5SYmKi4uDjFxcUpMTFRAQEB6tevnyQpNDRUQ4cO1bhx4xQWFqZatWrpySefVNOmTe3f6gEAAFe2cgeU3bt3q0OHDvbLY8eOlSQNGjRIS5cu1fjx45WTk6Phw4crMzNTrVu31saNGxUcHGzv88ILL8jLy0u9e/dWTk6Obr/9di1dulSenp5uuEoAAKCqK3dAiY+PlzGmxHabzaaEhAQlJCSUuI2fn58WLFigBQsWlHf3AADgCsBv8QAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMshoAAAAMtxe0A5d+6c/v73vys2Nlb+/v6qX7++pk+froKCAvs2xhglJCQoKipK/v7+io+P1759+9xdCgAAqKLcHlCee+45vfzyy1q4cKH279+v2bNna86cOVqwYIF9m9mzZ2vu3LlauHChdu3apYiICHXq1EmnTp1ydzkAAKAKcntA+fTTT3XXXXepe/fuiomJ0X333afOnTtr9+7dki7MnsybN0+TJ09Wr1691KRJEy1btkxnzpzRypUr3V0OAACogtweUG655RZt3rxZBw4ckCR99dVX2rlzp+644w5JUmpqqtLT09W5c2d7H19fX7Vv315JSUnFjpmbm6uT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XrqQ0qKjo5WWlqaQkJBy1+Zqf2qghupYgzvGoAZqoAZr1uCOMUrrb4zRqVOnFBUVVepYlRJQateuLU9PT6Wnpzusz8jIUHh4eJHtfX195evr67CuRo0aZdpXSEjIJf+j3NGfGqihOtbgjjGogRqowZo1uGMMZ/1DQ0PLNEalfEjWx8dHLVu21KZNmxzWb9q0SW3btq2MkgAAgIVU2iGesWPH6sEHH9RNN92kNm3a6JVXXtGRI0f06KOPVlZJAADAIiotoDzwwAP6/fffNX36dB0/flxNmjTRBx98oHr16rllfF9fX02dOrXIoaHL1Z8aqKE61uCOMaiBGqjBmjW4Ywx31FDIZkxZvusDAABw+fBjgQAAwHIIKAAAwHIIKAAAwHIIKAAAwHIIKABQSfiOAlCySj3VPWBVx48f16JFi7Rz504dP35cnp6eio2N1d13363BgwfL09OzsktENeDr66uvvvpKjRo1quxSAMvha8ZutGDBAu3evVvdu3dX7969tXz5cs2cOVMFBQXq1auXpk+fLi+v4jPh0aNH5efnp9q1a0uSPv74Y7388ss6cuSI6tWrpxEjRqhNmzYVfh1ycnK0atWqYl+Yb7/99jKN8fvvv+vrr79Ws2bNVKtWLf32229avHixcnNzdf/995fryTg/P1/r1q3TDz/8oMjISN1zzz0KDAwstd/p06e1cuVKJSUlKT09XTabTeHh4WrXrp369u3rdIzdu3erY8eOio2Nlb+/vz7//HP1799feXl52rBhgxo1aqQNGzYoODi4zNejMh09elQ1atRQUFCQw/r8/Hx9+umnuvXWWyupsivHxb8ldrH58+drwIABCgsLkyTNnTv3kvfxyy+/6N///remTJlSbPuoUaPUu3dv/b//9/8ueR9/lpmZqWXLltkfn4MGDVJ0dLTTPjk5OUpOTlatWrXUuHFjh7azZ8/qzTff1MCBA91WY1nVr19fGzZsUFxcXJm2379/vz777DO1adNGDRs21Hfffaf58+crNzdXAwYM0G233VZi3y+//FI1atRQbGysJGnFihVatGiR/fl+5MiR6tOnj9P9P//887rvvvtcPnfYe++9p927d6tr165q06aNtmzZon/+85/2162HH37YpfHT0tI0depUvfbaa+Xv7PpvE1vDb7/9ZrZs2WJ+//13Y4wxv/76q5k1a5aZNm2a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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.groupby('CAMPAIGN').agg(total_coupon_redem = ('COUPON_UPC','nunique')).sort_values(by='total_coupon_redem',\n",
    "                                                                                                     ascending = False).plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "9d4bf1e5-b479-4402-9748-9c197afc67ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_coupon_redem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          total_coupon_redem\n",
       "CAMPAIGN                    \n",
       "13                       129\n",
       "18                       121\n",
       "8                        105\n",
       "26                        53\n",
       "30                        41\n",
       "29                        17\n",
       "23                        16\n",
       "25                        15\n",
       "20                        15\n",
       "9                         14\n",
       "14                        14\n",
       "17                        13\n",
       "22                        12\n",
       "12                        11\n",
       "16                        10\n",
       "19                         9\n",
       "10                         7\n",
       "11                         6\n",
       "4                          6\n",
       "21                         5\n",
       "7                          5\n",
       "5                          5\n",
       "2                          4\n",
       "15                         2\n",
       "24                         2\n",
       "3                          2\n",
       "6                          1\n",
       "27                         1\n",
       "28                         1\n",
       "1                          1"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coupon_redeem = COUPON_REDEMPT_RAW.groupby('CAMPAIGN').agg(total_coupon_redem = ('COUPON_UPC','nunique'))\n",
    "coupon_redeem.sort_values(by='total_coupon_redem', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "a25ab269-fb1f-4463-87d4-96e14cf00b15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>346</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-13</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>301</td>\n",
       "      <td>16</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>351</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-18</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>506</td>\n",
       "      <td>34</td>\n",
       "      <td>TypeC</td>\n",
       "      <td>356</td>\n",
       "      <td>412</td>\n",
       "      <td>2019-12-23</td>\n",
       "      <td>2020-02-17</td>\n",
       "      <td>56</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>372</td>\n",
       "      <td>404</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>2020-02-09</td>\n",
       "      <td>32</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>443</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>377</td>\n",
       "      <td>411</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>2020-02-16</td>\n",
       "      <td>34</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CAMPAIGN  Total_product  Total_coupon_given DESCRIPTION  START_DAY  \\\n",
       "0         1            383                  11       TypeB        346   \n",
       "1         2            301                  16       TypeB        351   \n",
       "2         3            506                  34       TypeC        356   \n",
       "3         4            200                  12       TypeB        372   \n",
       "4         5            443                  11       TypeB        377   \n",
       "\n",
       "   END_DAY Start_Date   End_Date  Campaign_Duration Start_Month Start_Year  \\\n",
       "0      383 2019-12-13 2020-01-19                 37          12       2019   \n",
       "1      383 2019-12-18 2020-01-19                 32          12       2019   \n",
       "2      412 2019-12-23 2020-02-17                 56          12       2019   \n",
       "3      404 2020-01-08 2020-02-09                 32          01       2020   \n",
       "4      411 2020-01-13 2020-02-16                 34          01       2020   \n",
       "\n",
       "  End_Month End_Year  \n",
       "0        01     2020  \n",
       "1        01     2020  \n",
       "2        02     2020  \n",
       "3        02     2020  \n",
       "4        02     2020  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coupon_given.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "afb5960f-6492-40c7-947f-e911d129f35a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_coupon_redem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          total_coupon_redem\n",
       "CAMPAIGN                    \n",
       "1                          1\n",
       "2                          4\n",
       "3                          2"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coupon_redeem.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3788854b-8c67-46b4-891a-1f6a50db7eaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "coupon_redeem = coupon_redeem.merge(right = Coupon_given, on = 'CAMPAIGN', how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0afe6db8-1e63-4e20-88c2-caf83a028b2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>total_coupon_redem</th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>346</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-13</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>301</td>\n",
       "      <td>16</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>351</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-18</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>506</td>\n",
       "      <td>34</td>\n",
       "      <td>TypeC</td>\n",
       "      <td>356</td>\n",
       "      <td>412</td>\n",
       "      <td>2019-12-23</td>\n",
       "      <td>2020-02-17</td>\n",
       "      <td>56</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>372</td>\n",
       "      <td>404</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>2020-02-09</td>\n",
       "      <td>32</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>443</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>377</td>\n",
       "      <td>411</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>2020-02-16</td>\n",
       "      <td>34</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>TypeC</td>\n",
       "      <td>393</td>\n",
       "      <td>425</td>\n",
       "      <td>2020-01-29</td>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>32</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>03</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>259</td>\n",
       "      <td>8</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>398</td>\n",
       "      <td>432</td>\n",
       "      <td>2020-02-03</td>\n",
       "      <td>2020-03-08</td>\n",
       "      <td>34</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>03</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>105</td>\n",
       "      <td>17178</td>\n",
       "      <td>209</td>\n",
       "      <td>TypeA</td>\n",
       "      <td>412</td>\n",
       "      <td>460</td>\n",
       "      <td>2020-02-17</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>48</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "      <td>825</td>\n",
       "      <td>18</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>435</td>\n",
       "      <td>467</td>\n",
       "      <td>2020-03-11</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>32</td>\n",
       "      <td>03</td>\n",
       "      <td>2020</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>393</td>\n",
       "      <td>14</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>463</td>\n",
       "      <td>495</td>\n",
       "      <td>2020-04-08</td>\n",
       "      <td>2020-05-10</td>\n",
       "      <td>32</td>\n",
       "      <td>04</td>\n",
       "      <td>2020</td>\n",
       "      <td>05</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CAMPAIGN  total_coupon_redem  Total_product  Total_coupon_given  \\\n",
       "0         1                   1            383                  11   \n",
       "1         2                   4            301                  16   \n",
       "2         3                   2            506                  34   \n",
       "3         4                   6            200                  12   \n",
       "4         5                   5            443                  11   \n",
       "5         6                   1             18                   1   \n",
       "6         7                   5            259                   8   \n",
       "7         8                 105          17178                 209   \n",
       "8         9                  14            825                  18   \n",
       "9        10                   7            393                  14   \n",
       "\n",
       "  DESCRIPTION  START_DAY  END_DAY Start_Date   End_Date  Campaign_Duration  \\\n",
       "0       TypeB        346      383 2019-12-13 2020-01-19                 37   \n",
       "1       TypeB        351      383 2019-12-18 2020-01-19                 32   \n",
       "2       TypeC        356      412 2019-12-23 2020-02-17                 56   \n",
       "3       TypeB        372      404 2020-01-08 2020-02-09                 32   \n",
       "4       TypeB        377      411 2020-01-13 2020-02-16                 34   \n",
       "5       TypeC        393      425 2020-01-29 2020-03-01                 32   \n",
       "6       TypeB        398      432 2020-02-03 2020-03-08                 34   \n",
       "7       TypeA        412      460 2020-02-17 2020-04-05                 48   \n",
       "8       TypeB        435      467 2020-03-11 2020-04-12                 32   \n",
       "9       TypeB        463      495 2020-04-08 2020-05-10                 32   \n",
       "\n",
       "  Start_Month Start_Year End_Month End_Year  \n",
       "0          12       2019        01     2020  \n",
       "1          12       2019        01     2020  \n",
       "2          12       2019        02     2020  \n",
       "3          01       2020        02     2020  \n",
       "4          01       2020        02     2020  \n",
       "5          01       2020        03     2020  \n",
       "6          02       2020        03     2020  \n",
       "7          02       2020        04     2020  \n",
       "8          03       2020        04     2020  \n",
       "9          04       2020        05     2020  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coupon_redeem.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "4c14f416-6cee-4782-a581-cbbfc44c9112",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>total_coupon_redem</th>\n",
       "      <th>Total_product</th>\n",
       "      <th>Total_coupon_given</th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>START_DAY</th>\n",
       "      <th>END_DAY</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "      <th>Coupon_redeem_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>200</td>\n",
       "      <td>12</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>372</td>\n",
       "      <td>404</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>2020-02-09</td>\n",
       "      <td>32</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>443</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>377</td>\n",
       "      <td>411</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>2020-02-16</td>\n",
       "      <td>34</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>45.454545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>301</td>\n",
       "      <td>16</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>351</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-18</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>383</td>\n",
       "      <td>11</td>\n",
       "      <td>TypeB</td>\n",
       "      <td>346</td>\n",
       "      <td>383</td>\n",
       "      <td>2019-12-13</td>\n",
       "      <td>2020-01-19</td>\n",
       "      <td>37</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>01</td>\n",
       "      <td>2020</td>\n",
       "      <td>9.090909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>506</td>\n",
       "      <td>34</td>\n",
       "      <td>TypeC</td>\n",
       "      <td>356</td>\n",
       "      <td>412</td>\n",
       "      <td>2019-12-23</td>\n",
       "      <td>2020-02-17</td>\n",
       "      <td>56</td>\n",
       "      <td>12</td>\n",
       "      <td>2019</td>\n",
       "      <td>02</td>\n",
       "      <td>2020</td>\n",
       "      <td>5.882353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CAMPAIGN  total_coupon_redem  Total_product  Total_coupon_given  \\\n",
       "3         4                   6            200                  12   \n",
       "4         5                   5            443                  11   \n",
       "1         2                   4            301                  16   \n",
       "0         1                   1            383                  11   \n",
       "2         3                   2            506                  34   \n",
       "\n",
       "  DESCRIPTION  START_DAY  END_DAY Start_Date   End_Date  Campaign_Duration  \\\n",
       "3       TypeB        372      404 2020-01-08 2020-02-09                 32   \n",
       "4       TypeB        377      411 2020-01-13 2020-02-16                 34   \n",
       "1       TypeB        351      383 2019-12-18 2020-01-19                 32   \n",
       "0       TypeB        346      383 2019-12-13 2020-01-19                 37   \n",
       "2       TypeC        356      412 2019-12-23 2020-02-17                 56   \n",
       "\n",
       "  Start_Month Start_Year End_Month End_Year  Coupon_redeem_rate  \n",
       "3          01       2020        02     2020           50.000000  \n",
       "4          01       2020        02     2020           45.454545  \n",
       "1          12       2019        01     2020           25.000000  \n",
       "0          12       2019        01     2020            9.090909  \n",
       "2          12       2019        02     2020            5.882353  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coupon_redeem['Coupon_redeem_rate'] = (coupon_redeem['total_coupon_redem']/coupon_redeem['Total_coupon_given'])*100\n",
    "coupon_redeem.head().sort_values(by = 'Coupon_redeem_rate',ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "ba916b97-4ae0-471f-ac87-4874faff675c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='CAMPAIGN', ylabel='Coupon_redeem_rate'>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(15,5))\n",
    "sns.barplot(x = 'CAMPAIGN', y='Coupon_redeem_rate', data = coupon_redeem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "4180472d-07b3-4e5f-921a-8aaf78b29951",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2595732, 13)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "4479ea1d-4795-43e3-bbb5-acc8d38f4b32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['HOUSEHOLD_KEY', 'BASKET_ID', 'DAY', 'PRODUCT_ID', 'QUANTITY',\n",
       "       'SALES_VALUE', 'STORE_ID', 'RETAIL_DESC', 'TRANS_TIME', 'WEEK_NO',\n",
       "       'COUPON_DISC', 'COUPON_MATCH_DISC', 'Date'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "665eb0aa-af3b-413c-ac1e-2c9fd785ea33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2595732"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW['BASKET_ID'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "6c74dddf-fa8c-4d26-b4cc-197bdadf669e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "276484"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW['BASKET_ID'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "b7c1f1a7-df70-4ed4-8a4b-3832b0eb5a53",
   "metadata": {},
   "outputs": [],
   "source": [
    "trnx_bucket = TRANSACTION_RAW.groupby('BASKET_ID').aggregate({'SALES_VALUE':'sum','COUPON_DISC':'sum','COUPON_MATCH_DISC':'sum'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "75759b7d-1480-4859-a906-d7085f07fe0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26984851472</th>\n",
       "      <td>5.91</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26984851516</th>\n",
       "      <td>12.43</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26984896261</th>\n",
       "      <td>11.37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26984905972</th>\n",
       "      <td>2.55</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26984945254</th>\n",
       "      <td>3.53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             SALES_VALUE  COUPON_DISC  COUPON_MATCH_DISC\n",
       "BASKET_ID                                               \n",
       "26984851472         5.91            0                  0\n",
       "26984851516        12.43            0                  0\n",
       "26984896261        11.37            0                  0\n",
       "26984905972         2.55            0                  0\n",
       "26984945254         3.53            0                  0"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_bucket.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "671b232d-b7b6-422d-947a-134ca584612d",
   "metadata": {},
   "outputs": [],
   "source": [
    "trnx_bucket['Use_coupon'] = trnx_bucket['COUPON_DISC']!=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e0be8a5d-5b31-4701-a607-5c47b6501cb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    260812\n",
       "True      15672\n",
       "Name: Use_coupon, dtype: int64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_bucket['Use_coupon'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "a302a12d-32e0-46ae-a6ee-76c0e0ffc426",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "      <th>Use_coupon</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32006114302</th>\n",
       "      <td>961.49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40387571385</th>\n",
       "      <td>681.58</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33347880492</th>\n",
       "      <td>552.92</td>\n",
       "      <td>-3</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32505140858</th>\n",
       "      <td>545.17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30983766334</th>\n",
       "      <td>545.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35638473903</th>\n",
       "      <td>543.83</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34267311742</th>\n",
       "      <td>518.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30515165970</th>\n",
       "      <td>508.58</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32187143334</th>\n",
       "      <td>499.99</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41560297395</th>\n",
       "      <td>497.02</td>\n",
       "      <td>-3</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             SALES_VALUE  COUPON_DISC  COUPON_MATCH_DISC  Use_coupon\n",
       "BASKET_ID                                                           \n",
       "32006114302       961.49            0                  0       False\n",
       "40387571385       681.58            0                  0       False\n",
       "33347880492       552.92           -3                  0        True\n",
       "32505140858       545.17            0                  0       False\n",
       "30983766334       545.07            0                  0       False\n",
       "35638473903       543.83            0                  0       False\n",
       "34267311742       518.01            0                  0       False\n",
       "30515165970       508.58            0                  0       False\n",
       "32187143334       499.99            0                  0       False\n",
       "41560297395       497.02           -3                  0        True"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_bucket.sort_values('SALES_VALUE',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "d9a1b8cb-6c34-464c-bd40-b2cd019b94ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29.14"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(trnx_bucket['SALES_VALUE'].mean(),2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43e67712-9028-40d6-b8e0-9cc3fb3faab5",
   "metadata": {},
   "source": [
    "The average basket value is $26.93"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "745e01da-2045-4a6f-8a77-ede8e18e7707",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Basket value boxplot')"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(25,5))\n",
    "sns.boxplot(x=trnx_bucket['SALES_VALUE'])\n",
    "plt.title('Basket value boxplot', fontsize = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "4f0e2aa3-61a0-4cd0-b59d-be4459b89b7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sales_mean</th>\n",
       "      <th>COUPON_DISC_mean</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "      <th>No_coupon</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Use_coupon</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>26.795021</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.000019</td>\n",
       "      <td>260812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>68.210833</td>\n",
       "      <td>-2.986536</td>\n",
       "      <td>-0.426748</td>\n",
       "      <td>15672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            sales_mean  COUPON_DISC_mean  COUPON_MATCH_DISC  No_coupon\n",
       "Use_coupon                                                            \n",
       "False        26.795021          0.000000          -0.000019     260812\n",
       "True         68.210833         -2.986536          -0.426748      15672"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_bucket.groupby('Use_coupon').aggregate( sales_mean=('SALES_VALUE','mean'),\n",
    "                                             COUPON_DISC_mean =('COUPON_DISC','mean'),\n",
    "                                             COUPON_MATCH_DISC=('COUPON_MATCH_DISC','mean'),\n",
    "                                             No_coupon  =('SALES_VALUE','count'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab00ddef-b65b-48c9-8fb4-2505aa4b2661",
   "metadata": {},
   "source": [
    "The average basket value without a coupon is $26.79.\n",
    "\n",
    "The average basket value with a coupon is $68.21.\n",
    "\n",
    "The average discount generated by coupons is $2.98."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dce97a6-3649-4c68-b434-b1bf0daca63d",
   "metadata": {},
   "source": [
    "**It shows that customer purchase more product when coupon is given to them**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "ccd27b21-7ff2-4288-ba52-f89c50c8ecb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE_x</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>COUPON_DISC_x</th>\n",
       "      <th>COUPON_MATCH_DISC_x</th>\n",
       "      <th>Date</th>\n",
       "      <th>SALES_VALUE_y</th>\n",
       "      <th>COUPON_DISC_y</th>\n",
       "      <th>COUPON_MATCH_DISC_y</th>\n",
       "      <th>Use_coupon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>5.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>5.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>2.32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1873</td>\n",
       "      <td>29330097522</td>\n",
       "      <td>177</td>\n",
       "      <td>1135681</td>\n",
       "      <td>1</td>\n",
       "      <td>1.29</td>\n",
       "      <td>320</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>828427</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>334</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>844740</td>\n",
       "      <td>2</td>\n",
       "      <td>2.50</td>\n",
       "      <td>334</td>\n",
       "      <td>-0.68</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>847302</td>\n",
       "      <td>1</td>\n",
       "      <td>0.99</td>\n",
       "      <td>334</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>849202</td>\n",
       "      <td>1</td>\n",
       "      <td>7.79</td>\n",
       "      <td>334</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>856382</td>\n",
       "      <td>1</td>\n",
       "      <td>2.59</td>\n",
       "      <td>334</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>858893</td>\n",
       "      <td>1</td>\n",
       "      <td>1.39</td>\n",
       "      <td>334</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  DAY  PRODUCT_ID  QUANTITY  SALES_VALUE_x  \\\n",
       "0           2056  29330027026  177     1106523         1           2.32   \n",
       "1           2056  29330027026  177     5567325         1           2.69   \n",
       "2           2056  29330027027  177     1106523         1           2.32   \n",
       "3           1873  29330097522  177     1135681         1           1.29   \n",
       "4           1602  29339301484  177      828427         1           0.22   \n",
       "5           1602  29339301484  177      844740         2           2.50   \n",
       "6           1602  29339301484  177      847302         1           0.99   \n",
       "7           1602  29339301484  177      849202         1           7.79   \n",
       "8           1602  29339301484  177      856382         1           2.59   \n",
       "9           1602  29339301484  177      858893         1           1.39   \n",
       "\n",
       "   STORE_ID  RETAIL_DESC  TRANS_TIME  WEEK_NO  COUPON_DISC_x  \\\n",
       "0       341         0.00           4       26              0   \n",
       "1       341         0.00           4       26              0   \n",
       "2       341         0.00           4       26              0   \n",
       "3       320         0.00           1       26              0   \n",
       "4       334        -0.07        1537       26              0   \n",
       "5       334        -0.68        1537       26              0   \n",
       "6       334        -0.50        1537       26              0   \n",
       "7       334         0.00        1537       26              0   \n",
       "8       334         0.00        1537       26              0   \n",
       "9       334         0.00        1537       26              0   \n",
       "\n",
       "   COUPON_MATCH_DISC_x       Date  SALES_VALUE_y  COUPON_DISC_y  \\\n",
       "0                    0 2019-06-27           5.01              0   \n",
       "1                    0 2019-06-27           5.01              0   \n",
       "2                    0 2019-06-27           2.32              0   \n",
       "3                    0 2019-06-27           1.29              0   \n",
       "4                    0 2019-06-27         101.20              0   \n",
       "5                    0 2019-06-27         101.20              0   \n",
       "6                    0 2019-06-27         101.20              0   \n",
       "7                    0 2019-06-27         101.20              0   \n",
       "8                    0 2019-06-27         101.20              0   \n",
       "9                    0 2019-06-27         101.20              0   \n",
       "\n",
       "   COUPON_MATCH_DISC_y  Use_coupon  \n",
       "0                    0       False  \n",
       "1                    0       False  \n",
       "2                    0       False  \n",
       "3                    0       False  \n",
       "4                    0       False  \n",
       "5                    0       False  \n",
       "6                    0       False  \n",
       "7                    0       False  \n",
       "8                    0       False  \n",
       "9                    0       False  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_desc = TRANSACTION_RAW.merge(right= trnx_bucket,on='BASKET_ID',how='left')\n",
    "trnx_desc.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "d4a1d184-0e58-4860-a55f-8afbb248a95b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE_x</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>...</th>\n",
       "      <th>SALES_VALUE_y</th>\n",
       "      <th>COUPON_DISC_y</th>\n",
       "      <th>COUPON_MATCH_DISC_y</th>\n",
       "      <th>Use_coupon</th>\n",
       "      <th>MANUFACTURER</th>\n",
       "      <th>DEPARTMENT</th>\n",
       "      <th>BRAND</th>\n",
       "      <th>COMMODITY_DESC</th>\n",
       "      <th>SUB_COMMODITY_DESC</th>\n",
       "      <th>CURR_SIZE_OF_PRODUCT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>5.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>FLUID MILK PRODUCTS</td>\n",
       "      <td>FLUID MILK WHITE ONLY</td>\n",
       "      <td>1 GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>5.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>531</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CANNED JUICES</td>\n",
       "      <td>BLENDED JUICE&amp;COMBINATIONS (50</td>\n",
       "      <td>46 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>2.32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>FLUID MILK PRODUCTS</td>\n",
       "      <td>FLUID MILK WHITE ONLY</td>\n",
       "      <td>1 GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1873</td>\n",
       "      <td>29330097522</td>\n",
       "      <td>177</td>\n",
       "      <td>1135681</td>\n",
       "      <td>1</td>\n",
       "      <td>1.29</td>\n",
       "      <td>320</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>1600</td>\n",
       "      <td>DRUG GM</td>\n",
       "      <td>National</td>\n",
       "      <td>BABY FOODS</td>\n",
       "      <td>BABY SPRING WATERS</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1602</td>\n",
       "      <td>29339301484</td>\n",
       "      <td>177</td>\n",
       "      <td>828427</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>334</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>1537</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>101.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>CAT FOOD</td>\n",
       "      <td>CANNED CAT FOOD (9 LIVES/FRISK</td>\n",
       "      <td>5.5 OZ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  DAY  PRODUCT_ID  QUANTITY  SALES_VALUE_x  \\\n",
       "0           2056  29330027026  177     1106523         1           2.32   \n",
       "1           2056  29330027026  177     5567325         1           2.69   \n",
       "2           2056  29330027027  177     1106523         1           2.32   \n",
       "3           1873  29330097522  177     1135681         1           1.29   \n",
       "4           1602  29339301484  177      828427         1           0.22   \n",
       "\n",
       "   STORE_ID  RETAIL_DESC  TRANS_TIME  WEEK_NO  ...  SALES_VALUE_y  \\\n",
       "0       341         0.00           4       26  ...           5.01   \n",
       "1       341         0.00           4       26  ...           5.01   \n",
       "2       341         0.00           4       26  ...           2.32   \n",
       "3       320         0.00           1       26  ...           1.29   \n",
       "4       334        -0.07        1537       26  ...         101.20   \n",
       "\n",
       "   COUPON_DISC_y COUPON_MATCH_DISC_y  Use_coupon  MANUFACTURER  DEPARTMENT  \\\n",
       "0              0                   0       False            69     GROCERY   \n",
       "1              0                   0       False           531     GROCERY   \n",
       "2              0                   0       False            69     GROCERY   \n",
       "3              0                   0       False          1600     DRUG GM   \n",
       "4              0                   0       False            69     GROCERY   \n",
       "\n",
       "      BRAND       COMMODITY_DESC              SUB_COMMODITY_DESC  \\\n",
       "0   Private  FLUID MILK PRODUCTS           FLUID MILK WHITE ONLY   \n",
       "1  National        CANNED JUICES  BLENDED JUICE&COMBINATIONS (50   \n",
       "2   Private  FLUID MILK PRODUCTS           FLUID MILK WHITE ONLY   \n",
       "3  National           BABY FOODS              BABY SPRING WATERS   \n",
       "4   Private             CAT FOOD  CANNED CAT FOOD (9 LIVES/FRISK   \n",
       "\n",
       "  CURR_SIZE_OF_PRODUCT  \n",
       "0                 1 GA  \n",
       "1                46 OZ  \n",
       "2                 1 GA  \n",
       "3                       \n",
       "4               5.5 OZ  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_desc= trnx_desc.merge(right=PRODUCT_RAW,on='PRODUCT_ID',how='left')\n",
    "trnx_desc.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "04cba3bd-8eb8-4968-ae24-1e5848d25e17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE_x</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>COUPON_DISC_x</th>\n",
       "      <th>COUPON_MATCH_DISC_x</th>\n",
       "      <th>Date</th>\n",
       "      <th>Use_coupon</th>\n",
       "      <th>MANUFACTURER</th>\n",
       "      <th>DEPARTMENT</th>\n",
       "      <th>BRAND</th>\n",
       "      <th>COMMODITY_DESC</th>\n",
       "      <th>SUB_COMMODITY_DESC</th>\n",
       "      <th>CURR_SIZE_OF_PRODUCT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>False</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>FLUID MILK PRODUCTS</td>\n",
       "      <td>FLUID MILK WHITE ONLY</td>\n",
       "      <td>1 GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>False</td>\n",
       "      <td>531</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>National</td>\n",
       "      <td>CANNED JUICES</td>\n",
       "      <td>BLENDED JUICE&amp;COMBINATIONS (50</td>\n",
       "      <td>46 OZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>False</td>\n",
       "      <td>69</td>\n",
       "      <td>GROCERY</td>\n",
       "      <td>Private</td>\n",
       "      <td>FLUID MILK PRODUCTS</td>\n",
       "      <td>FLUID MILK WHITE ONLY</td>\n",
       "      <td>1 GA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  DAY  PRODUCT_ID  QUANTITY  SALES_VALUE_x  \\\n",
       "0           2056  29330027026  177     1106523         1           2.32   \n",
       "1           2056  29330027026  177     5567325         1           2.69   \n",
       "2           2056  29330027027  177     1106523         1           2.32   \n",
       "\n",
       "   STORE_ID  RETAIL_DESC  TRANS_TIME  WEEK_NO  COUPON_DISC_x  \\\n",
       "0       341          0.0           4       26              0   \n",
       "1       341          0.0           4       26              0   \n",
       "2       341          0.0           4       26              0   \n",
       "\n",
       "   COUPON_MATCH_DISC_x       Date  Use_coupon  MANUFACTURER DEPARTMENT  \\\n",
       "0                    0 2019-06-27       False            69    GROCERY   \n",
       "1                    0 2019-06-27       False           531    GROCERY   \n",
       "2                    0 2019-06-27       False            69    GROCERY   \n",
       "\n",
       "      BRAND       COMMODITY_DESC              SUB_COMMODITY_DESC  \\\n",
       "0   Private  FLUID MILK PRODUCTS           FLUID MILK WHITE ONLY   \n",
       "1  National        CANNED JUICES  BLENDED JUICE&COMBINATIONS (50   \n",
       "2   Private  FLUID MILK PRODUCTS           FLUID MILK WHITE ONLY   \n",
       "\n",
       "  CURR_SIZE_OF_PRODUCT  \n",
       "0                 1 GA  \n",
       "1                46 OZ  \n",
       "2                 1 GA  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trnx_desc.drop(['SALES_VALUE_y','COUPON_DISC_y','COUPON_MATCH_DISC_y'],axis=1,inplace=True)\n",
    "trnx_desc.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "d19fad1e-9e8d-418d-8cba-9bc2ae010203",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_quantity</th>\n",
       "      <th>Use_coupon</th>\n",
       "      <th>Coupon</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COMMODITY_DESC</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>7839</td>\n",
       "      <td>6019</td>\n",
       "      <td>-10596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(CORP USE ONLY)</th>\n",
       "      <td>61</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ADULT INCONTINENCE</th>\n",
       "      <td>553</td>\n",
       "      <td>87</td>\n",
       "      <td>-37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AIR CARE</th>\n",
       "      <td>5556</td>\n",
       "      <td>1320</td>\n",
       "      <td>-929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ANALGESICS</th>\n",
       "      <td>4769</td>\n",
       "      <td>692</td>\n",
       "      <td>-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ANTACIDS</th>\n",
       "      <td>1889</td>\n",
       "      <td>280</td>\n",
       "      <td>-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>APPAREL</th>\n",
       "      <td>510</td>\n",
       "      <td>59</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>APPLES</th>\n",
       "      <td>14440</td>\n",
       "      <td>2209</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AUDIO/VIDEO PRODUCTS</th>\n",
       "      <td>1073</td>\n",
       "      <td>125</td>\n",
       "      <td>-46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AUTOMOTIVE PRODUCTS</th>\n",
       "      <td>1068</td>\n",
       "      <td>86</td>\n",
       "      <td>-7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      total_quantity  Use_coupon  Coupon\n",
       "COMMODITY_DESC                                          \n",
       "                                7839        6019  -10596\n",
       "(CORP USE ONLY)                   61           5       0\n",
       "ADULT INCONTINENCE               553          87     -37\n",
       "AIR CARE                        5556        1320    -929\n",
       "ANALGESICS                      4769         692     -13\n",
       "ANTACIDS                        1889         280     -22\n",
       "APPAREL                          510          59      -1\n",
       "APPLES                         14440        2209       0\n",
       "AUDIO/VIDEO PRODUCTS            1073         125     -46\n",
       "AUTOMOTIVE PRODUCTS             1068          86      -7"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COMMODITY_Coupon = trnx_desc.groupby('COMMODITY_DESC').aggregate(total_quantity=('QUANTITY','count'),\n",
    "                                             Use_coupon=('Use_coupon','sum'),\n",
    "                                             Coupon=('COUPON_DISC_x','sum'))\n",
    "COMMODITY_Coupon.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "f467a852-abaa-4bc5-8c6a-67629b723e91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_quantity</th>\n",
       "      <th>Use_coupon</th>\n",
       "      <th>Coupon</th>\n",
       "      <th>Coupon%</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COMMODITY_DESC</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>7839</td>\n",
       "      <td>6019</td>\n",
       "      <td>-10596</td>\n",
       "      <td>76.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BABY FOODS</th>\n",
       "      <td>20356</td>\n",
       "      <td>5648</td>\n",
       "      <td>-349</td>\n",
       "      <td>27.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RESTRICTED DIET</th>\n",
       "      <td>51</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>25.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIAPERS &amp; DISPOSABLES</th>\n",
       "      <td>5008</td>\n",
       "      <td>1216</td>\n",
       "      <td>-1110</td>\n",
       "      <td>24.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AIR CARE</th>\n",
       "      <td>5556</td>\n",
       "      <td>1320</td>\n",
       "      <td>-929</td>\n",
       "      <td>23.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRZN SEAFOOD</th>\n",
       "      <td>64</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>23.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BULK FOODS</th>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>22.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BABY HBC</th>\n",
       "      <td>4626</td>\n",
       "      <td>1020</td>\n",
       "      <td>-325</td>\n",
       "      <td>22.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRZN BREAKFAST FOODS</th>\n",
       "      <td>10595</td>\n",
       "      <td>2286</td>\n",
       "      <td>-421</td>\n",
       "      <td>21.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SMOKING CESSATIONS</th>\n",
       "      <td>79</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>21.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FROZEN - BOXED(GROCERY)</th>\n",
       "      <td>971</td>\n",
       "      <td>208</td>\n",
       "      <td>-40</td>\n",
       "      <td>21.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HOUSEHOLD CLEANG NEEDS</th>\n",
       "      <td>10460</td>\n",
       "      <td>2221</td>\n",
       "      <td>-665</td>\n",
       "      <td>21.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RICE CAKES</th>\n",
       "      <td>1622</td>\n",
       "      <td>333</td>\n",
       "      <td>-6</td>\n",
       "      <td>20.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAT LITTER</th>\n",
       "      <td>3272</td>\n",
       "      <td>665</td>\n",
       "      <td>-202</td>\n",
       "      <td>20.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>REFRGRATD DOUGH PRODUCTS</th>\n",
       "      <td>18960</td>\n",
       "      <td>3848</td>\n",
       "      <td>-948</td>\n",
       "      <td>20.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VITAMINS</th>\n",
       "      <td>2426</td>\n",
       "      <td>489</td>\n",
       "      <td>-211</td>\n",
       "      <td>20.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LAUNDRY ADDITIVES</th>\n",
       "      <td>4979</td>\n",
       "      <td>993</td>\n",
       "      <td>-148</td>\n",
       "      <td>19.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FROZEN BREAD/DOUGH</th>\n",
       "      <td>7912</td>\n",
       "      <td>1567</td>\n",
       "      <td>-432</td>\n",
       "      <td>19.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FACIAL TISS/DNR NAPKIN</th>\n",
       "      <td>7800</td>\n",
       "      <td>1527</td>\n",
       "      <td>-130</td>\n",
       "      <td>19.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PICKLE/RELISH/PKLD VEG</th>\n",
       "      <td>7071</td>\n",
       "      <td>1381</td>\n",
       "      <td>-351</td>\n",
       "      <td>19.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DOG FOODS</th>\n",
       "      <td>12093</td>\n",
       "      <td>2351</td>\n",
       "      <td>-786</td>\n",
       "      <td>19.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRUIT - SHELF STABLE</th>\n",
       "      <td>21536</td>\n",
       "      <td>4175</td>\n",
       "      <td>-172</td>\n",
       "      <td>19.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CONVENIENT BRKFST/WHLSM SNACKS</th>\n",
       "      <td>22547</td>\n",
       "      <td>4358</td>\n",
       "      <td>-608</td>\n",
       "      <td>19.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DISHWASH DETERGENTS</th>\n",
       "      <td>6942</td>\n",
       "      <td>1330</td>\n",
       "      <td>-324</td>\n",
       "      <td>19.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRZN VEGETABLE/VEG DSH</th>\n",
       "      <td>22564</td>\n",
       "      <td>4271</td>\n",
       "      <td>-249</td>\n",
       "      <td>18.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HAND/BODY/FACIAL PRODUCTS</th>\n",
       "      <td>3441</td>\n",
       "      <td>643</td>\n",
       "      <td>-197</td>\n",
       "      <td>18.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAT FOOD</th>\n",
       "      <td>16210</td>\n",
       "      <td>3015</td>\n",
       "      <td>-454</td>\n",
       "      <td>18.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BABYFOOD</th>\n",
       "      <td>475</td>\n",
       "      <td>88</td>\n",
       "      <td>-6</td>\n",
       "      <td>18.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ORAL HYGIENE PRODUCTS</th>\n",
       "      <td>10324</td>\n",
       "      <td>1888</td>\n",
       "      <td>-659</td>\n",
       "      <td>18.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MOLASSES/SYRUP/PANCAKE MIXS</th>\n",
       "      <td>5443</td>\n",
       "      <td>994</td>\n",
       "      <td>-106</td>\n",
       "      <td>18.26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                total_quantity  Use_coupon  Coupon  Coupon%\n",
       "COMMODITY_DESC                                                             \n",
       "                                          7839        6019  -10596    76.78\n",
       "BABY FOODS                               20356        5648    -349    27.75\n",
       "RESTRICTED DIET                             51          13       0    25.49\n",
       "DIAPERS & DISPOSABLES                     5008        1216   -1110    24.28\n",
       "AIR CARE                                  5556        1320    -929    23.76\n",
       "FRZN SEAFOOD                                64          15       0    23.44\n",
       "BULK FOODS                                   9           2       0    22.22\n",
       "BABY HBC                                  4626        1020    -325    22.05\n",
       "FRZN BREAKFAST FOODS                     10595        2286    -421    21.58\n",
       "SMOKING CESSATIONS                          79          17       0    21.52\n",
       "FROZEN - BOXED(GROCERY)                    971         208     -40    21.42\n",
       "HOUSEHOLD CLEANG NEEDS                   10460        2221    -665    21.23\n",
       "RICE CAKES                                1622         333      -6    20.53\n",
       "CAT LITTER                                3272         665    -202    20.32\n",
       "REFRGRATD DOUGH PRODUCTS                 18960        3848    -948    20.30\n",
       "VITAMINS                                  2426         489    -211    20.16\n",
       "LAUNDRY ADDITIVES                         4979         993    -148    19.94\n",
       "FROZEN BREAD/DOUGH                        7912        1567    -432    19.81\n",
       "FACIAL TISS/DNR NAPKIN                    7800        1527    -130    19.58\n",
       "PICKLE/RELISH/PKLD VEG                    7071        1381    -351    19.53\n",
       "DOG FOODS                                12093        2351    -786    19.44\n",
       "FRUIT - SHELF STABLE                     21536        4175    -172    19.39\n",
       "CONVENIENT BRKFST/WHLSM SNACKS           22547        4358    -608    19.33\n",
       "DISHWASH DETERGENTS                       6942        1330    -324    19.16\n",
       "FRZN VEGETABLE/VEG DSH                   22564        4271    -249    18.93\n",
       "HAND/BODY/FACIAL PRODUCTS                 3441         643    -197    18.69\n",
       "CAT FOOD                                 16210        3015    -454    18.60\n",
       "BABYFOOD                                   475          88      -6    18.53\n",
       "ORAL HYGIENE PRODUCTS                    10324        1888    -659    18.29\n",
       "MOLASSES/SYRUP/PANCAKE MIXS               5443         994    -106    18.26"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COMMODITY_Coupon['Coupon%']=round((COMMODITY_Coupon['Use_coupon']/COMMODITY_Coupon['total_quantity'])*100,2)\n",
    "COMMODITY_Coupon.sort_values('Coupon%',ascending=False).head(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eb51644-c3e6-45b8-b870-a3e1d0cc0614",
   "metadata": {},
   "source": [
    "**While the most prominents products for which coupons are created are haircare and makeup products, coupons are mostly used on drinks, cigarettes, diapers, etc. Bathroom products are not even among the top 10**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "caf0b060-cc9a-447f-aeb3-316fc63f654e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>DAY</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
       "      <th>8</th>\n",
       "      <th>51</th>\n",
       "      <td>78.66</td>\n",
       "      <td>-16.54</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <th>67</th>\n",
       "      <td>41.10</td>\n",
       "      <td>-8.59</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <th>88</th>\n",
       "      <td>26.90</td>\n",
       "      <td>-6.72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <th>94</th>\n",
       "      <td>63.43</td>\n",
       "      <td>-11.08</td>\n",
       "      <td>-2</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <th>101</th>\n",
       "      <td>53.45</td>\n",
       "      <td>-16.42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2500</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">100</th>\n",
       "      <th>695</th>\n",
       "      <td>57.68</td>\n",
       "      <td>-14.85</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>698</th>\n",
       "      <td>50.54</td>\n",
       "      <td>-14.72</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <th>704</th>\n",
       "      <td>73.65</td>\n",
       "      <td>-19.79</td>\n",
       "      <td>-2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">102</th>\n",
       "      <th>706</th>\n",
       "      <td>13.95</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>708</th>\n",
       "      <td>45.12</td>\n",
       "      <td>-15.99</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>225533 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           SALES_VALUE  RETAIL_DESC  COUPON_DISC  \\\n",
       "HOUSEHOLD_KEY WEEK_NO DAY                                          \n",
       "1             8       51         78.66       -16.54           -1   \n",
       "              10      67         41.10        -8.59            0   \n",
       "              13      88         26.90        -6.72            0   \n",
       "              14      94         63.43       -11.08           -2   \n",
       "              15      101        53.45       -16.42            0   \n",
       "...                                ...          ...          ...   \n",
       "2500          100     695        57.68       -14.85           -2   \n",
       "                      698        50.54       -14.72           -2   \n",
       "              101     704        73.65       -19.79           -2   \n",
       "              102     706        13.95        -0.42            0   \n",
       "                      708        45.12       -15.99           -1   \n",
       "\n",
       "                           COUPON_MATCH_DISC  \n",
       "HOUSEHOLD_KEY WEEK_NO DAY                     \n",
       "1             8       51                   0  \n",
       "              10      67                   0  \n",
       "              13      88                   0  \n",
       "              14      94                  -1  \n",
       "              15      101                  0  \n",
       "...                                      ...  \n",
       "2500          100     695                  0  \n",
       "                      698                  0  \n",
       "              101     704                  0  \n",
       "              102     706                  0  \n",
       "                      708                  0  \n",
       "\n",
       "[225533 rows x 4 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.groupby(['HOUSEHOLD_KEY','WEEK_NO','DAY']).aggregate({'SALES_VALUE':'sum','RETAIL_DESC':'sum',\n",
    "                                                                  'COUPON_DISC' :'sum','COUPON_MATCH_DISC':'sum'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "59513d4f-e141-45f0-b5d7-4c9de6595451",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>DAY</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>WEEK_NO</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>177</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>177</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  DAY  PRODUCT_ID  QUANTITY  SALES_VALUE  \\\n",
       "0           2056  29330027026  177     1106523         1         2.32   \n",
       "1           2056  29330027026  177     5567325         1         2.69   \n",
       "2           2056  29330027027  177     1106523         1         2.32   \n",
       "\n",
       "   STORE_ID  RETAIL_DESC  TRANS_TIME  WEEK_NO  COUPON_DISC  COUPON_MATCH_DISC  \\\n",
       "0       341          0.0           4       26            0                  0   \n",
       "1       341          0.0           4       26            0                  0   \n",
       "2       341          0.0           4       26            0                  0   \n",
       "\n",
       "        Date  \n",
       "0 2019-06-27  \n",
       "1 2019-06-27  \n",
       "2 2019-06-27  "
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "0e13c143-875c-482d-a8f1-71047b373ee8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>3636562.00</td>\n",
       "      <td>-639843.50</td>\n",
       "      <td>-18813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020</th>\n",
       "      <td>4420901.08</td>\n",
       "      <td>-758491.34</td>\n",
       "      <td>-27992</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SALES_VALUE  RETAIL_DESC  COUPON_DISC\n",
       "Date                                       \n",
       "2019   3636562.00   -639843.50       -18813\n",
       "2020   4420901.08   -758491.34       -27992"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.groupby(TRANSACTION_RAW['Date'].dt.year).aggregate({'SALES_VALUE':'sum','RETAIL_DESC':'sum',\n",
    "                                                                   'COUPON_DISC':'sum'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93b3fcfb-ba5c-48f6-8d85-f34f1575a567",
   "metadata": {},
   "source": [
    "**Sales Value increases as Retail Discount and Coupon Discount increases**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "304a906c-9df5-4302-a44b-bfd5f155c75c",
   "metadata": {},
   "source": [
    "**Droping the columns**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "7ae7b30f-9059-4e19-b9e9-fa4e218d2a21",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "08aab6de-5d49-4ac2-b524-699125352752",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW.drop(['START_DAY','END_DAY'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "27672a56-b709-45d3-8cb4-a21805e4be1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "      <td>07</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN Start_Date   End_Date  Campaign_Duration Start_Month  \\\n",
       "0       TypeB        24 2020-10-21 2020-12-20                 60          10   \n",
       "1       TypeC        15 2020-07-01 2020-12-09                161          07   \n",
       "2       TypeB        25 2020-10-21 2020-11-22                 32          10   \n",
       "\n",
       "  Start_Year End_Month End_Year  \n",
       "0       2020        12     2020  \n",
       "1       2020        12     2020  \n",
       "2       2020        11     2020  "
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "f4f49e65-7973-4159-b123-b571ee7946b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2020-10-21\n",
       "1     2020-07-01\n",
       "2     2020-10-21\n",
       "3     2020-09-07\n",
       "4     2020-10-08\n",
       "5     2020-09-16\n",
       "6     2020-09-16\n",
       "7     2020-08-10\n",
       "8     2020-08-26\n",
       "9     2020-07-29\n",
       "10    2020-06-15\n",
       "11    2020-07-15\n",
       "12    2020-05-19\n",
       "13    2020-04-22\n",
       "14    2020-04-22\n",
       "15    2020-04-08\n",
       "16    2020-03-11\n",
       "17    2020-02-17\n",
       "18    2020-02-03\n",
       "19    2020-01-29\n",
       "20    2019-12-23\n",
       "21    2020-01-13\n",
       "22    2020-01-08\n",
       "23    2019-12-13\n",
       "24    2019-12-18\n",
       "25    2019-11-20\n",
       "26    2019-10-09\n",
       "27    2019-09-17\n",
       "28    2019-08-26\n",
       "29    2019-08-13\n",
       "Name: Start_Date, dtype: object"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW['Start_Date'] = pd.to_datetime(CAMPAIGN_DESC_RAW['Start_Date']).apply(lambda x: x.date())\n",
    "CAMPAIGN_DESC_RAW['Start_Date'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "2a58a16e-4fab-485d-910f-53f15bd745c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "      <td>07</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  Start_Date   End_Date  Campaign_Duration Start_Month  \\\n",
       "0       TypeB        24  2020-10-21 2020-12-20                 60          10   \n",
       "1       TypeC        15  2020-07-01 2020-12-09                161          07   \n",
       "2       TypeB        25  2020-10-21 2020-11-22                 32          10   \n",
       "\n",
       "  Start_Year End_Month End_Year  \n",
       "0       2020        12     2020  \n",
       "1       2020        12     2020  \n",
       "2       2020        11     2020  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "09ad763d-a1b0-46d6-a05f-7263eab12fa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(CAMPAIGN_DESC_RAW['Start_Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ccc2cf00-dc4d-4c67-96fe-4b858b0c07b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAMPAIGN_DESC_RAW['End_Date'] = pd.to_datetime(CAMPAIGN_DESC_RAW['End_Date']).apply(lambda x: x.date())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "eb84c0b5-326c-4383-b5ad-99199c19804e",
   "metadata": {},
   "outputs": [],
   "source": [
    "COUPON_REDEMPT_RAW.drop(['DAY'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "1f9e0361-07b6-40fe-9d99-047159731c12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10000085364</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>51700010076</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>54200000033</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-03-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY   COUPON_UPC  CAMPAIGN       Date\n",
       "0              1  10000085364         8 2020-02-26\n",
       "1              1  51700010076         8 2020-02-26\n",
       "2              1  54200000033         8 2020-03-03"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "8c20bc8a-64cc-45e1-adf4-31fd0687cef8",
   "metadata": {},
   "outputs": [],
   "source": [
    "COUPON_REDEMPT_RAW['Date']=pd.to_datetime(COUPON_REDEMPT_RAW['Date']).apply(lambda x: x.date())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "73c715d0-efaa-4c79-b11d-c06b8a3f725d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HOUSEHOLD_KEY     int16\n",
       "COUPON_UPC        int64\n",
       "CAMPAIGN           int8\n",
       "Date             object\n",
       "dtype: object"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "ab4525a4-2267-4d0d-8f17-82b31955bb8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>BASKET_ID</th>\n",
       "      <th>PRODUCT_ID</th>\n",
       "      <th>QUANTITY</th>\n",
       "      <th>SALES_VALUE</th>\n",
       "      <th>STORE_ID</th>\n",
       "      <th>RETAIL_DESC</th>\n",
       "      <th>TRANS_TIME</th>\n",
       "      <th>COUPON_DISC</th>\n",
       "      <th>COUPON_MATCH_DISC</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027026</td>\n",
       "      <td>5567325</td>\n",
       "      <td>1</td>\n",
       "      <td>2.69</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2056</td>\n",
       "      <td>29330027027</td>\n",
       "      <td>1106523</td>\n",
       "      <td>1</td>\n",
       "      <td>2.32</td>\n",
       "      <td>341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-06-27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY    BASKET_ID  PRODUCT_ID  QUANTITY  SALES_VALUE  STORE_ID  \\\n",
       "0           2056  29330027026     1106523         1         2.32       341   \n",
       "1           2056  29330027026     5567325         1         2.69       341   \n",
       "2           2056  29330027027     1106523         1         2.32       341   \n",
       "\n",
       "   RETAIL_DESC  TRANS_TIME  COUPON_DISC  COUPON_MATCH_DISC       Date  \n",
       "0          0.0           4            0                  0 2019-06-27  \n",
       "1          0.0           4            0                  0 2019-06-27  \n",
       "2          0.0           4            0                  0 2019-06-27  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW.drop(['DAY','WEEK_NO'],axis=1,inplace=True)\n",
    "TRANSACTION_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "c21b3d54-b984-439b-9525-85ec3c087ac2",
   "metadata": {},
   "outputs": [],
   "source": [
    "TRANSACTION_RAW.rename(columns = {\"RETAIL_DESC\": \"RETAIL_DISC\"}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "c24ea26c-2e79-4314-b664-cbce7ef53fa4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HOUSEHOLD_KEY          int16\n",
       "BASKET_ID              int64\n",
       "PRODUCT_ID             int32\n",
       "QUANTITY               int32\n",
       "SALES_VALUE          float64\n",
       "STORE_ID               int32\n",
       "RETAIL_DISC          float64\n",
       "TRANS_TIME             int16\n",
       "COUPON_DISC             int8\n",
       "COUPON_MATCH_DISC       int8\n",
       "Date                  object\n",
       "dtype: object"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRANSACTION_RAW['Date']=pd.to_datetime(TRANSACTION_RAW['Date']).apply(lambda x: x.date())\n",
    "TRANSACTION_RAW.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebeef608-5b44-47e9-a02d-0d97d6b63ed3",
   "metadata": {},
   "source": [
    "### Now Loading the table to Database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "bad10234-7e86-4196-86ed-472a79efc286",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy.engine import URL\n",
    "import snowflake.connector as snowCtx\n",
    "from snowflake.connector.pandas_tools import write_pandas\n",
    "import pandas as pd\n",
    "import getpass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "000216b0-8309-47bf-bce2-ac13969d018a",
   "metadata": {},
   "outputs": [],
   "source": [
    "conn = snowflake.connector.connect(\n",
    "        user = 'PAYALB',\n",
    "        ##password = getpass.getpass('Your Snowflake Password: ')\n",
    "        password='Payaljain@123',\n",
    "        account = 'zjxcbru-hk64126',\n",
    "        database='pb_project',\n",
    "        warehouse='COMPUTE_WH',\n",
    "        SCHEMA='PUBLIC',\n",
    "        schema ='PUBLIC'\n",
    " ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "e77e1307-557a-4ce1-a85f-cc7618427b56",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur=conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "3539f2cd-afa7-46cb-8814-38e1d5745277",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEHOLD_KEY</th>\n",
       "      <th>COUPON_UPC</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10000085364</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>51700010076</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>54200000033</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-03-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HOUSEHOLD_KEY   COUPON_UPC  CAMPAIGN        Date\n",
       "0              1  10000085364         8  2020-02-26\n",
       "1              1  51700010076         8  2020-02-26\n",
       "2              1  54200000033         8  2020-03-03"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "COUPON_REDEMPT_RAW.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "16fc4d5e-fd96-407e-b48e-f646ecb9e065",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<snowflake.connector.cursor.SnowflakeCursor at 0x1a2ab06ed70>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cur.execute(''' CREATE OR REPLACE TABLE COUPON_REDEMPT_NEW\n",
    "(HOUSEHOLD_KEY NUMBER(38,0),\n",
    "COUPON_UPC NUMBER(38,0),\n",
    "CAMPAIGN NUMBER(38,0),\n",
    "Date Date\n",
    ")''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "37b91161-f392-4dcd-8320-0b04c6d1557d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<snowflake.connector.cursor.SnowflakeCursor at 0x1a2ab06ed70>"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cur.execute('''CREATE OR REPLACE TABLE TRANSACTION_NEW\n",
    "(HOUSEHOLD_KEY NUMBER(38,0),\n",
    "BASKET_ID NUMBER(38,0),\n",
    "PRODUCT_ID NUMBER(38,0),\n",
    "QUANTITY NUMBER(38,0),\n",
    "SALES_VALUE FLOAT,\n",
    "STORE_ID NUMBER(38,0),\n",
    "RETAIL_DISC FLOAT,\n",
    "TRANS_TIME NUMBER(38,0),\n",
    "COUPON_DISC FLOAT,\n",
    "COUPON_MATCH_DISC FLOAT,\n",
    "Date Date\n",
    ")\n",
    "''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "707d5dda-cd77-44a1-ad17-db9652a25e28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CAMPAIGN</th>\n",
       "      <th>Start_Date</th>\n",
       "      <th>End_Date</th>\n",
       "      <th>Campaign_Duration</th>\n",
       "      <th>Start_Month</th>\n",
       "      <th>Start_Year</th>\n",
       "      <th>End_Month</th>\n",
       "      <th>End_Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>24</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-12-20</td>\n",
       "      <td>60</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>15</td>\n",
       "      <td>2020-07-01</td>\n",
       "      <td>2020-12-09</td>\n",
       "      <td>161</td>\n",
       "      <td>07</td>\n",
       "      <td>2020</td>\n",
       "      <td>12</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>25</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>2020-11-22</td>\n",
       "      <td>32</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TypeC</td>\n",
       "      <td>20</td>\n",
       "      <td>2020-09-07</td>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>70</td>\n",
       "      <td>09</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TypeB</td>\n",
       "      <td>23</td>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>2020-11-15</td>\n",
       "      <td>38</td>\n",
       "      <td>10</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DESCRIPTION  CAMPAIGN  Start_Date    End_Date  Campaign_Duration  \\\n",
       "0       TypeB        24  2020-10-21  2020-12-20                 60   \n",
       "1       TypeC        15  2020-07-01  2020-12-09                161   \n",
       "2       TypeB        25  2020-10-21  2020-11-22                 32   \n",
       "3       TypeC        20  2020-09-07  2020-11-16                 70   \n",
       "4       TypeB        23  2020-10-08  2020-11-15                 38   \n",
       "\n",
       "  Start_Month Start_Year End_Month End_Year  \n",
       "0          10       2020        12     2020  \n",
       "1          07       2020        12     2020  \n",
       "2          10       2020        11     2020  \n",
       "3          09       2020        11     2020  \n",
       "4          10       2020        11     2020  "
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CAMPAIGN_DESC_RAW.head() ## cleaned raw dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "01ff53b2-9dad-4f53-8023-4aa24684d2a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<snowflake.connector.cursor.SnowflakeCursor at 0x1a2ab06ed70>"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cur.execute('''\n",
    "CREATE OR REPLACE TABLE CAMPAIGN_DESC_NEW\n",
    "(DESCRIPTION VARCHAR(10),\n",
    "CAMPAIGN NUMBER(38,0),\n",
    "Start_date date,\n",
    "End_date  date,\n",
    "Campaign_Duration NUMBER(38,0),\n",
    "Start_month VARCHAR(10),\n",
    "End_month VARCHAR(10),\n",
    "Start_Year INT,\n",
    "End_Year INT)''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "fff329c1-d066-4533-81ea-a61094d0af43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True,1,30\n"
     ]
    }
   ],
   "source": [
    "success, nchunks, nrows, _ = write_pandas(conn, CAMPAIGN_DESC_RAW,'CAMPAIGN_DESC_NEW',quote_identifiers=False)\n",
    "print(str(success)+','+str(nchunks)+','+str(nrows))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "e6c0eeb3-2d79-418a-a363-e636f057caa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True,1,2318\n"
     ]
    }
   ],
   "source": [
    "success, nchunks, nrows, _ = write_pandas(conn, COUPON_REDEMPT_RAW,'COUPON_REDEMPT_NEW',quote_identifiers=False)\n",
    "print(str(success)+','+str(nchunks)+','+str(nrows))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "83729ed6-31e8-4a15-a714-dcd5740ee0b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True,1,2595732\n"
     ]
    }
   ],
   "source": [
    "success, nchunks, nrows, _ = write_pandas(conn,TRANSACTION_RAW ,'TRANSACTION_NEW',quote_identifiers=False)\n",
    "print(str(success)+','+str(nchunks)+','+str(nrows))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "b2a225ef-2863-4cf5-ae1c-25d981d21050",
   "metadata": {},
   "outputs": [],
   "source": [
    "cur.close()\n",
    "conn.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
