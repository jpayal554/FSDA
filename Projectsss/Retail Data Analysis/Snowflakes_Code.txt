create database pb_project;
use pb_project;

CREATE OR REPLACE TABLE DEMOGRAPHIC_RAW(
AGE_DESC CHAR(20),
MARITAL_STATUS_CODE CHAR(5),
INCOME_DESC VARCHAR(40),
HOMEOWNER_DESC VARCHAR(40),
HH_COMP_DESC VARCHAR(50),
HOUSEHOLD_SIZE_DESC VARCHAR(50),
KID_CATEGORY_DESC VARCHAR(40),
HOUSEHOLD_KEY INT PRIMARY KEY
);

CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW(
DESCRIPTION CHAR(10),
CAMPAIGN INT,
START_DAY INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE (CAMPAIGN)
);

-- CREATE INDEX IN01 ON CAMPAIGN_DESC_RAW(DESCRIPTION);
-- CREATE INDEX IN02 ON CAMPAIGN_DESC_RAW(CAMPAIGN);

CREATE OR REPLACE TABLE CAMPAIGN_RAW(
DESCRIPTION CHAR(10),
HOUSEHOLD_KEY INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) REFERENCES CAMPAIGN_DESC_RAW(DESCRIPTION),
FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN),
FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY)
);

CREATE OR REPLACE TABLE PRODUCT_RAW(
PRODUCT_ID INT PRIMARY KEY,
MANUFACTURER INT,
DEPARTMENT VARCHAR(50),
BRAND VARCHAR(30),
COMMODITY_DESC VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65),
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);

CREATE OR REPLACE TABLE COUPON_RAW(
COUPON_UPC INT,
PRODUCT_ID INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW(
HOUSEHOLD_KEY INT,
DAY INT,
COUPON_UPC INT,
CAMPAIGN INT,
FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY),
FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE TRANSACTION_RAW(
HOUSEHOLD_KEY INT,
BASKET_ID INT,
DAY INT,
PRODUCT_ID INT,
QUANTITY INT,
SALES_VALUE FLOAT,
STORE_ID INT,
RETAIL_DESC FLOAT,
TRANS_TIME INT,
WEEK_NO INT,
COUPON_DISC INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY)
);



CREATE OR REPLACE STORAGE INTEGRATION S3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::573464297813:role/Retailrow'
STORAGE_ALLOWED_LOCATIONS = ('S3://retailraww1/');

DESC INTEGRATION S3_int;

CREATE OR REPLACE STAGE Retail_stage
URL = 'S3://retailraww1'
FILE_FORMAT = CSV
STORAGE_INTEGRATION = S3_int;

LIST @Retail_stage;
SHOW STAGES;

Show pipes;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.CAMPAIGN_DESC_RAW
FROM '@Retail_stage/CAMPAIGN_DESC/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.CAMPAIGN_RAW
FROM '@Retail_stage/CAMPAIGN/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.COUPON_REDEMPT_RAW
FROM '@Retail_stage/COUPON_REDEMPT/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.COUPON_RAW
FROM '@Retail_stage/COUPON/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRPHIC
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.DEMOGRAPHIC_RAW
FROM '@Retail_stage/DEMOGRAPHIC/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.PRODUCT_RAW
FROM '@Retail_stage/PRODUCT/'
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION
AUTO_INGEST = TRUE
AS COPY INTO PB_PROJECT.PUBLIC.TRANSACTION_RAW
FROM '@Retail_stage/TRANSACTION/'
FILE_FORMAT = CSV;

SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW;
SELECT COUNT(*) FROM CAMPAIGN_RAW;
SELECT COUNT(*) FROM COUPON_REDEMPT_RAW;
SELECT COUNT(*) FROM COUPON_RAW;
SELECT COUNT(*) FROM DEMOGRAPHIC_RAW;
SELECT COUNT(*) FROM PRODUCT_RAW;
SELECT COUNT(*) FROM TRANSACTION_RAW;


ALTER PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC REFRESH;
ALTER PIPE RETAIL_SNOWPIPE_CAMPAIGN REFRESH;
ALTER PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT REFRESH;
ALTER PIPE RETAIL_SNOWPIPE_COUPON REFRESH;
ALTER PIPE RETAIL_SNOWPIPE_DEMOGRPHIC REFRESH;
ALTER PIPE RETAIL_SNOWPIPE_PRODUCT REFRESH;
ALTER PIPE RETAIL_SNOWPIPE_TRANSACTION REFRESH;

SELECT * FROM CAMPAIGN_DESC_RAW;
SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM COUPON_REDEMPT_RAW;
SELECT * FROM COUPON_RAW;
SELECT * FROM DEMOGRAPHIC_RAW;
SELECT * FROM PRODUCT_RAW;
SELECT * FROM TRANSACTION_RAW;

SELECT * FROM CAMPAIGN_DESC_NEW;
SELECT * FROM COUPON_REDEMPT_NEW;
SELECT * FROM TRANSACTION_NEW;

-- KPIS
-- 1. Customer Demographics KPIs:
-- o Count of unique households: Measure the total number of unique households in the Demographic table.
SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS FROM DEMOGRAPHIC_RAW; -- 2500
SELECT DISTINCT HOUSEHOLD_SIZE_DESC FROM DEMOGRAPHIC_RAW;

-- o Household composition distribution: Analyze the distribution of household compositions (HH_COMP_DESC) to 
--    understand the composition of households.
SELECT DISTINCT HH_COMP_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS 
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT HH_COMP_DESC, COUNT(*) AS Count,
       ROUND((COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DEMOGRAPHIC_RAW)), 2) AS household_Percentage
FROM DEMOGRAPHIC_RAW
GROUP BY HH_COMP_DESC;

-- o Age distribution: Calculate the percentage or count of customers in different age groups (AGE_DESC).
SELECT AGE_DESC, COUNT(*) AS Count,
       ROUND((COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DEMOGRAPHIC_RAW)), 2) AS Percentage
FROM DEMOGRAPHIC_RAW
GROUP BY AGE_DESC;
-- OR ---

SELECT AGE_DESC,TOTAL_HOUSEHOLDS,ROUND(TOTAL_HOUSEHOLDS/2500 * 100,2) AS PERC_AGEWISE_HOUSEHOLDS_DISTR
FROM
(SELECT AGE_DESC,
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM demographic_RAW 
GROUP BY 1
ORDER BY 2 DESC)
GROUP BY 1,2;

-- o Marital status distribution: Analyze the proportion of customers in different marital status categories (MARITAL_STATUS_CODE).
SELECT MARITAL_STATUS_CODE, COUNT(*) AS Count,
       ROUND((COUNT(*)/ (SELECT COUNT(*) FROM DEMOGRAPHIC_RAW) * 100.0), 2) AS Percentage
FROM DEMOGRAPHIC_RAW
GROUP BY MARITAL_STATUS_CODE
ORDER BY 2 DESC;

-- o Income distribution: Determine the distribution of customers across income levels
-- (INCOME_DESC).
SELECT INCOME_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOT_CUSTOMERS,
 ROUND((COUNT(*)/(SELECT COUNT(*) FROM DEMOGRAPHIC_RAW) * 100.0 ), 2) AS INC_Percentage
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2;

SELECT * FROM DEMOGRAPHIC_RAW;
-- o Homeownership distribution: Calculate the percentage or count of customers who own or rent their homes (HOMEOWNER_DESC)
SELECT HOMEOWNER_DESC , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) /(SELECT COUNT(*) FROM DEMOGRAPHIC_RAW) * 100 , 2) AS PERC_HOMEOWNER_DESC_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;


SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1;

CREATE OR REPLACE PROCEDURE HOUSEHOLD_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Household_kpi AS (SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1);
$$;

SHOW PROCEDURES;

CALL Household_kpi();

CREATE OR REPLACE TASK  Household_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Household_kpi();

SHOW TASKS;

ALTER TASK  Household_kpi_TASK RESUME;
ALTER TASK  Household_kpi_TASK SUSPEND; 


--                          2. Campaign KPIs:
-- o Number of campaigns: Count the total number of campaigns in the Campaign table.
SELECT COUNT(DISTINCT CAMPAIGN) AS TOTAL_CAMPAIGN FROM CAMPAIGN_RAW; -- 30

-- o Campaign duration: Calculate the duration of each campaign by subtracting the start day from the end day (in the Campaign_desc table).
SELECT DISTINCT CAMPAIGN,(END_DAY - START_DAY) AS CAMPAIGN_DURATION FROM CAMPAIGN_DESC_RAW;

-- o Campaign effectiveness: Analyze the number of households associated with each campaign (in the Campaign table) to measure campaign reach.
SELECT DISTINCT CD.CAMPAIGN, COUNT(D.HOUSEHOLD_KEY) AS HOUSE_PARTICPAITED FROM CAMPAIGN_DESC_RAW CD
JOIN CAMPAIGN_RAW C USING(CAMPAIGN)
JOIN DEMOGRAPHIC_RAW D USING(HOUSEHOLD_KEY)
GROUP BY 1;

CREATE OR REPLACE PROCEDURE CAMPAIGN_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Campaign_kpi AS (
 SELECT C.CAMPAIGN, C.HOUSEHOLD_KEY,(CD.END_DAY - CD.START_DAY) AS CAMPAIGN_DURATION
 FROM CAMPAIGN_RAW C
 JOIN CAMPAIGN_DESC_RAW CD USING(CAMPAIGN)
 JOIN DEMOGRAPHIC_RAW D USING(HOUSEHOLD_KEY)
 GROUP BY 1,2,3);
$$;

CALL CAMPAIGN_KPI();
SHOW PROCEDURES;


CREATE OR REPLACE TASK Campaign_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Campaign_kpi();


--                          3. Coupon KPIs:
-- o Coupon redemption rate: Calculate the percentage of coupons redeemed (from the coupon_redempt table) compared to the total number of coupons distributed (from the Coupon table).
WITH COUPON_GIVEN AS(
SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTAL_COUPON_GIVEN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCT
FROM COUPON_RAW
LEFT JOIN CAMPAIGN_DESC_NEW USING(CAMPAIGN)
GROUP BY CAMPAIGN
ORDER BY COUNT(DISTINCT PRODUCT_ID) DESC),
COUPON_REDEEM AS (
SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTAL_COUPON_REDEEM
FROM COUPON_REDEMPT_NEW
GROUP BY CAMPAIGN
ORDER BY COUNT(DISTINCT COUPON_UPC) DESC)
SELECT CAMPAIGN, (TOTAL_COUPON_REDEEM/TOTAL_COUPON_GIVEN)*100 AS COUPON_REDEEM_RATE
FROM COUPON_GIVEN
JOIN COUPON_REDEEM USING(CAMPAIGN)
ORDER BY 1 DESC;

-- o Coupon usage by campaign: Measure the number of coupon redemptions (from the coupon_redempt table) for each campaign (in the Coupon table).
WITH COUPON_GIVEN AS(
SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTAL_COUPON_GIVEN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCT
FROM COUPON_RAW
LEFT JOIN CAMPAIGN_DESC_NEW USING(CAMPAIGN)
GROUP BY CAMPAIGN
ORDER BY COUNT(DISTINCT PRODUCT_ID) DESC),
COUPON_REDEEM AS (
SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS COUPON_REDEEM
FROM COUPON_REDEMPT_NEW
GROUP BY CAMPAIGN
ORDER BY COUNT(DISTINCT COUPON_UPC) DESC)
SELECT DISTINCT CAMPAIGN, COUPON_REDEEM
FROM COUPON_GIVEN
JOIN COUPON_REDEEM USING(CAMPAIGN)
ORDER BY 2 DESC;


CREATE OR REPLACE PROCEDURE COUPON_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Coupon_kpi AS (
 WITH COUPON_GIVEN AS(
SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTAL_COUPON_GIVEN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCT
FROM COUPON_RAW
LEFT JOIN CAMPAIGN_DESC_NEW USING(CAMPAIGN)
GROUP BY CAMPAIGN
ORDER BY COUNT(DISTINCT PRODUCT_ID) DESC),
COUPON_REDEEM AS (
SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTAL_COUPON_REDEEM
FROM COUPON_REDEMPT_NEW
GROUP BY CAMPAIGN
ORDER BY COUNT(DISTINCT COUPON_UPC) DESC)
SELECT CAMPAIGN, (TOTAL_COUPON_REDEEM/TOTAL_COUPON_GIVEN)*100 AS COUPON_REDEEM_RATE
FROM COUPON_GIVEN
JOIN COUPON_REDEEM USING(CAMPAIGN)
ORDER BY 1 DESC);
$$;

SHOW PROCEDURES;

CALL COUPON_KPI();

CREATE OR REPLACE TASK  Coupon_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Coupon_kpi();

--                           4. Product KPIs:
-- o Sales value: Calculate the total sales value for each product (in the Transaction_data table) to identify top-selling products.
SELECT * FROM PRODUCT_RAW;
SELECT DISTINCT PRODUCT_ID, COMMODITY_DESC, SUM(SALES_VALUE) AS TOTAL_SALES
FROM TRANSACTION_NEW
JOIN PRODUCT_RAW USING(PRODUCT_ID)
GROUP BY 1,2
ORDER BY 3 DESC;

-- o Manufacturer distribution: Analyze the distribution of products across different manufacturers (in the Product table).
SELECT MANUFACTURER, COUNT(*) AS product_count
FROM PRODUCT_RAW
GROUP BY manufacturer;

-- o Department-wise sales: Measure the sales value by department (in the Product table) to understand which departments contribute most to revenue.
SELECT DISTINCT DEPARTMENT, SUM(SALES_VALUE) AS TOTAL_REVENUE
FROM PRODUCT_RAW
JOIN TRANSACTION_NEW USING(PRODUCT_ID)
GROUP BY 1
ORDER BY 2 DESC;

-- o Brand-wise sales: Calculate the sales value for each brand (in the Product table) to identify top-selling brands.
SELECT DISTINCT BRAND, SUM(SALES_VALUE) AS TOTAL_REVENUE
FROM PRODUCT_RAW
JOIN TRANSACTION_NEW USING(PRODUCT_ID)
GROUP BY 1
ORDER BY 2 DESC;

CREATE OR REPLACE PROCEDURE PRODUCT_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Product_kpi AS (
 SELECT PRODUCT_ID, COMMODITY_DESC, DEPARTMENT, BRAND, MANUFACTURER, SUM(SALES_VALUE) AS TOTAL_REVENUE
FROM PRODUCT_RAW
JOIN TRANSACTION_NEW USING(PRODUCT_ID)
GROUP BY 1,2,3,4,5
ORDER BY 6 DESC);
$$;

SHOW PROCEDURES;

CALL CAMPAIGN_KPI();

CREATE OR REPLACE TASK  Product_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Product_kpi();


--                             5. Transaction KPIs:
-- o Total sales value: Calculate the sum of sales values (in the Transaction_data table) to measure overall revenue.
SELECT DISTINCT HOUSEHOLD_KEY, BASKET_ID, PRODUCT_ID, SUM(SALES_VALUE) AS TOTAL_REVENUE FROM TRANSACTION_NEW
GROUP BY 1,2,3;

SELECT DISTINCT HOUSEHOLD_KEY, SUM(SALES_VALUE) FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- o Average transaction value: Calculate the average sales value per transaction to understand customer spending patterns.
SELECT DISTINCT HOUSEHOLD_KEY, BASKET_ID, PRODUCT_ID, DATE, AVG(SALES_VALUE) AS AVG_SALES FROM TRANSACTION_NEW
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

-- o Quantity sold: Measure the total quantity sold (in the Transaction_data table) to understand product demand.
SELECT PRODUCT_ID, DEPARTMENT, COMMODITY_DESC, BRAND, COUNT(QUANTITY) AS TOTAL_QUANTITY
FROM PRODUCT_RAW
LEFT JOIN TRANSACTION_NEW USING(PRODUCT_ID)
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

-- o Discounts: Analyze the amount and impact of discounts (RETAIL_DISC, COUPON_DISC, COUPON_MATCH_DISC) on sales value.
SELECT * FROM TRANSACTION_NEW;
SELECT PRODUCT_ID,SUM(RETAIL_DISC) AS TOT_RETAIL_DISCOUNT,
       SUM(COUPON_DISC) AS TOT_COUPON_DISCOUNT,
       SUM(COUPON_MATCH_DISC) AS TOT_COUPON_MATCH_DISC,
       SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOT_DISCOUNT,
       SUM(SALES_VALUE) AS TOTAL_SALES
    -- (SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) / SUM(SALES_VALUE)) * 100 AS DISC_PERCENTAGE
FROM TRANSACTION_NEW
GROUP BY 1;

CREATE OR REPLACE PROCEDURE TRANSACTION_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Transaction_kpi AS (
 SELECT T.HOUSEHOLD_KEY, T.BASKET_ID, T.PRODUCT_ID, SUM(T.SALES_VALUE) AS TOTAL_SALES,
 AVG(T.SALES_VALUE) AS AVG_SALES, P.DEPARTMENT, P.COMMODITY_DESC, P.BRAND, COUNT(T.QUANTITY) AS TOTAL_QUANTITY,
 SUM(RETAIL_DISC) AS TOT_RETAIL_DISCOUNT, SUM(COUPON_DISC) AS TOT_COUPON_DISCOUNT,
 SUM(COUPON_MATCH_DISC) AS TOT_COUPON_MATCH_DISC, SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOT_DISCOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN PRODUCT_RAW P ON T.PRODUCT_ID =P.PRODUCT_ID
GROUP BY 1,2,3,6,7,8
ORDER BY 1);
$$;

SHOW PROCEDURES;

CALL TRANSACTION_KPI();

CREATE OR REPLACE TASK  Transaction_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Transaction_kpi();