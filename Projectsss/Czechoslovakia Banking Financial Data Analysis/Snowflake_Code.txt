CREATE DATABASE Bank_PROJECT;
USE Bank_PROJECT;

CREATE TABLE ACCOUNT(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(40),
`Date` DATE ,
Account_type VARCHAR(40),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE TABLE ORDERS(
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE CLIENT(
client_id	INT PRIMARY KEY,
Sex	CHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);


CREATE OR REPLACE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
);


CREATE OR REPLACE TABLE LOAN(
loan_id	INT ,
account_id	INT,
`Date`	DATE,
amount	INT,
duration	INT,
payments	INT,
`status` VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);


CREATE TABLE TRANSACTIONS(
trans_id INT,	
account_id	INT,
`Date`	DATE,
`Type`	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
`account` INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));

CREATE TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
`type` CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);

CREATE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
`type` CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
);

CREATE OR REPLACE STORAGE INTEGRATION S3_NEW
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::573464297813:role/Bank_data_role'
STORAGE_ALLOWED_LOCATIONS = ('S3://czechoslovakiabank/');

DESC INTEGRATION S3_NEW;


CREATE OR REPLACE STAGE BANK
URL = 'S3://czechoslovakiabank/'
FILE_FORMAT = CSV
STORAGE_INTEGRATION = S3_NEW;

LIST @BANK;
SHOW STAGES;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."ACCOUNT"
FROM '@BANK/Account/'
FILE_FORMAT = CSV

Show pipes;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."CARD"
FROM '@BANK/Card/'
FILE_FORMAT = CSV

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."CLIENT"
FROM '@BANK/Client/'
FILE_FORMAT = CSV

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."DISPOSITION"
FROM '@BANK/disp/'
FILE_FORMAT = CSV

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."DISTRICT"
FROM '@BANK/District/'
FILE_FORMAT = CSV

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."LOAN"
FROM '@BANK/Loan/'
FILE_FORMAT = CSV

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."TRANSACTIONS"
FROM '@BANK/Trnx/'
FILE_FORMAT = CSV

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDERS
AUTO_INGEST = TRUE
AS COPY INTO "BANK_PROJECT"."PUBLIC"."ORDERS"
FROM '@BANK/Order/'
FILE_FORMAT = CSV

ALTER PIPE BANK_SNOWPIPE_ACCOUNT REFRESH;
ALTER PIPE BANK_SNOWPIPE_CARD REFRESH;
ALTER PIPE BANK_SNOWPIPE_CLIENT REFRESH;
ALTER PIPE BANK_SNOWPIPE_DISPOSITION REFRESH;
ALTER PIPE BANK_SNOWPIPE_DISTRICT REFRESH;
ALTER PIPE BANK_SNOWPIPE_LOAN REFRESH;
ALTER PIPE BANK_SNOWPIPE_TRANSACTIONS REFRESH;
ALTER PIPE BANK_SNOWPIPE_ORDERS REFRESH;


SELECT * FROM DISTRICT;
SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTIONS;
SELECT * FROM DISPOSITION;
SELECT * FROM CARD;
SELECT * FROM ORDERS;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;

select distinct `type` from card

select distinct extract(year from `DATE`) from TRANSACTIONS
--1 CZK = 0.046735 USD
--1 CZK = 3.836706 INR

SELECT DISTINCT YEAR(`DATE`),COUNT(*)
FROM account
GROUP BY 1
order by 1 DESC;

--DATA TRANSFORMATION
/*
2021 -> 2017
2020 -> 2018
2019 -> 2019 -- NO CHANGE
2018 -> 2020
2017 -> 2021
2016 -> 2022 - Done
*/
SELECT MIN(`Date`),MAX(`Date`) FROM TRANSACTIONS;

SELECT * FROM TRANSACTIONS;

SELECT * FROM CARD;

SELECT DISTINCT year(issued) -- yyyy-mm-dd
from card;


select YEAR(`Date`),COUNT(*) AS TOTAL
FROM TRANSACTIONS
GROUP BY 1
ORDER BY 2 DESC;

UPDATE TRANSACTIONS
SET `Date` = DATEADD(YEAR,1 , `Date`)
WHERE YEAR(`Date`) = 2016;

UPDATE TRANSACTIONS
SET BANK = 'Sky Bank' WHERE BANK IS NULL AND YEAR(`Date`) = 2022;

UPDATE TRANSACTIONS
SET BANK = 'DBS Bank' WHERE BANK IS NULL AND YEAR(`Date`) = 2021;

UPDATE TRANSACTIONS
SET BANK = 'Northern Bank' WHERE BANK IS NULL AND YEAR(`Date`) = 2019;

UPDATE TRANSACTIONS
SET BANK = 'Southern Bank' WHERE BANK IS NULL AND YEAR(`Date`) = 2018;

UPDATE TRANSACTIONS
SET BANK = 'ADB Bank' WHERE BANK IS NULL AND YEAR(`Date`) = 2020;

SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = 2017;



--------------------------------------------------------------------------------------


UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2016;

select YEAR(ISSUED),COUNT(*) AS TOTAL
FROM CARD
GROUP BY 1
ORDER BY 1;
----------------------------------------------------LOANS--------------------------------------------------------
select YEAR(`Date`),COUNT(*) AS TOTAL
FROM LOAN
GROUP BY 1
ORDER BY 2 DESC;

UPDATE LOAN
SET `Date` = DATEADD(YEAR,1 , `Date`)
WHERE YEAR(`Date`) = 2016;

select YEAR(`Date`),COUNT(*) AS TOTAL
FROM ACCOUNT
GROUP BY 1
ORDER BY 2 DESC;

UPDATE ACCOUNT
SET `Date` = DATEADD(YEAR,-1 , `Date`)
WHERE YEAR(`Date`) = 2017;


-- finding male & female
SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLIENT,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT
FROM CLIENT;

-----FINDING MALE FEMALE %
SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END)/COUNT(*) *100.0 AS MALE_PERC,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END)/COUNT(*) * 100.0 AS FEMALE_PERC
FROM CLIENT;

ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT
SET AGE =DATEDIFF('YEAR',BIRTH_DATE, '2022-12-19');

SELECT * FROM CLIENT;

---1.What is the demographic profile of the bank's clients and how does it vary across districts?
CREATE OR REPLACE TABLE czec_demographic_data_kpi AS
SELECT DISTRICT_ID, DISTRICT_NAME, AVERAGE_SALARY, AVG(AGE) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLINET,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLINET,
ROUND((FEMALE_CLINET/MALE_CLINET)*100,2) AS MALE_FEMALE_PERCENT,
COUNT(*) AS TOTAL_CLIENT FROM CLIENT C
JOIN DISTRICT D ON D.DISTRICT_CODE = C.DISTRICT_ID
GROUP BY 1,2,3
ORDER BY 1;

-- 2. How the banks have performed over the years. Give their detailed analysis year &  month-wise. 

--ASSUMING EVERY LAST MONTH CUSTOMER ACCOUNT IS GETTING TXNCTED
CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(SELECT ACCOUNT_ID,YEAR(`DATE`) AS TXN_YEAR,
   MONTH(`DATE`) AS TXN_MONTH,
   MAX(`DATE`) AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.`DATE` = LTD.LATEST_TXN_DATE
WHERE TXN.`TYPE` = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY 1,2,3;

SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE ;

SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------------------------------------------------
-- Which types of cards are most frequently used by the bank's clients and what is the  overall profitability of the credit card business? 

CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,
COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.`TYPE` = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.`TYPE` = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,
SUM(ALWB.BALANCE) AS TOT_BALANCE,
ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,
ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA
FROM TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;
----------------------------------------------------------------------------------------------------------
select TXN_YEAR,COUNT(*) AS TOTAL
FROM BANKING_KPI
GROUP BY 1
ORDER BY 2 DESC;

SELECT * FROM BANKING_KPI
ORDER BY txn_year,BANK;

SELECT * FROM TRANSACTIONS
WHERE ACCOUNT_ID = 1
ORDER BY `DATE`;

SELECT * FROM BANKING_KPI
where txn_year =2019;

select TXN_YEAR AS TXN_YEAR,BANK,
SUM(AVG_BALANCE) AS TOT_AVG_BALANCE

from BANKING_KPI
GROUP BY 1,2
ORDER BY TOT_AVG_BALANCE DESC;

SELECT * FROM TRANSACTIONS
WHERE BANK = 'Sky Bank' AND ACCOUNT_ID = 7745
ORDER BY DATE ,BANK;

SELECT * FROM TRANSACTIONS
WHERE ACCOUNT_ID = 1 AND YEAR(`DATE`) = 2019 AND MONTH(`DATE`) = 7;


SELECT DISTINCT STATUS,SUM(AMOUNT)
FROM LOAN
GROUP BY 1
ORDER BY 1;